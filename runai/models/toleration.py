# coding: utf-8

"""
Runai API

# Introduction  The Run:AI Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://docs.run.ai/latest/developer/rest-auth/#request-an-api-token).

The version of the OpenAPI document: 2.19
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from runai.models.toleration_effect import TolerationEffect
from runai.models.toleration_operator import TolerationOperator
from typing import Optional, Set
from typing_extensions import Self


class Toleration(BaseModel):
    """
    Pydantic class model representing Toleration details..

    Parameters:
        ```python
        name: Optional[str]
        operator: Optional[TolerationOperator]
        key: Optional[str]
        value: Optional[str]
        effect: Optional[TolerationEffect]
        seconds: Optional[int]
        exclude: Optional[bool]
        ```
        name: The name of the toleration. (mandatory)
        operator: See model TolerationOperator for more information.
        key: The taint key that the toleration applies to. (mandatory)
        value: The taint value the toleration matches to. Mandatory if operator is Exists, forbidden otherwise.
        effect: See model TolerationEffect for more information.
        seconds: The period of time the toleration tolerates the taint. Valid only if effect is NoExecute. taint.
        exclude: Use &#39;true&#39; in case the label is defined in defaults of the policy, and you wish to exclude it from the workload.
    Example:
        ```python
        Toleration(
            name='0',
                        operator='Equal',
                        key='',
                        value='',
                        effect='NoSchedule',
                        seconds=1,
                        exclude=False
        )
        ```
    """  # noqa: E501

    name: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(
        default=None, description="The name of the toleration. (mandatory)"
    )
    operator: Optional[TolerationOperator] = None
    key: Optional[StrictStr] = Field(
        default=None,
        description="The taint key that the toleration applies to. (mandatory)",
    )
    value: Optional[StrictStr] = Field(
        default=None,
        description="The taint value the toleration matches to. Mandatory if operator is Exists, forbidden otherwise.",
    )
    effect: Optional[TolerationEffect] = None
    seconds: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(
        default=None,
        description="The period of time the toleration tolerates the taint. Valid only if effect is NoExecute. taint.",
    )
    exclude: Optional[StrictBool] = Field(
        default=None,
        description="Use 'true' in case the label is defined in defaults of the policy, and you wish to exclude it from the workload.",
    )
    __properties: ClassVar[List[str]] = [
        "name",
        "operator",
        "key",
        "value",
        "effect",
        "seconds",
        "exclude",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Toleration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict["name"] = None

        # set to None if operator (nullable) is None
        # and model_fields_set contains the field
        if self.operator is None and "operator" in self.model_fields_set:
            _dict["operator"] = None

        # set to None if key (nullable) is None
        # and model_fields_set contains the field
        if self.key is None and "key" in self.model_fields_set:
            _dict["key"] = None

        # set to None if value (nullable) is None
        # and model_fields_set contains the field
        if self.value is None and "value" in self.model_fields_set:
            _dict["value"] = None

        # set to None if effect (nullable) is None
        # and model_fields_set contains the field
        if self.effect is None and "effect" in self.model_fields_set:
            _dict["effect"] = None

        # set to None if seconds (nullable) is None
        # and model_fields_set contains the field
        if self.seconds is None and "seconds" in self.model_fields_set:
            _dict["seconds"] = None

        # set to None if exclude (nullable) is None
        # and model_fields_set contains the field
        if self.exclude is None and "exclude" in self.model_fields_set:
            _dict["exclude"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Toleration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "name": obj.get("name"),
                "operator": obj.get("operator"),
                "key": obj.get("key"),
                "value": obj.get("value"),
                "effect": obj.get("effect"),
                "seconds": obj.get("seconds"),
                "exclude": obj.get("exclude"),
            }
        )
        return _obj
