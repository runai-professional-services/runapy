# coding: utf-8

"""
Runai API

# Introduction  The Run:AI Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://docs.run.ai/latest/developer/rest-auth/#request-an-api-token).

The version of the OpenAPI document: 2.19
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from runai.models.exposed_urls_rules import ExposedUrlsRules
from runai.models.ports_rules import PortsRules
from runai.models.related_urls_rules import RelatedUrlsRules
from typing import Optional, Set
from typing_extensions import Self


class ConnectivityRules(BaseModel):
    """
    Pydantic class model representing ConnectivityRules.

    Parameters:
        ```python
        ports: Optional[PortsRules]
        exposed_urls: Optional[ExposedUrlsRules]
        related_urls: Optional[RelatedUrlsRules]
        ```
        ports: See model PortsRules for more information.
        exposed_urls: See model ExposedUrlsRules for more information.
        related_urls: See model RelatedUrlsRules for more information.
    Example:
        ```python
        ConnectivityRules(
            ports=runai.models.ports_rules.PortsRules(
                    attributes = runai.models.port_rules.PortRules(
                        container = runai.models.integer_rules.IntegerRules(
                            source_of_rule = {"scope":"project","projectId":3},
                            required = True,
                            can_edit = True,
                            min = 56,
                            max = 56,
                            step = 56, ),
                        service_type = runai.models.port_service_type_rules.PortServiceTypeRules(),
                        custom_external_port = runai.models.boolean_rules.BooleanRules(
                            required = True,
                            can_edit = True, ),
                        external = runai.models.integer_rules.IntegerRules(
                            required = True,
                            can_edit = True,
                            min = 56,
                            max = 56,
                            step = 56, ),
                        tool_type = runai.models.string_rules.StringRules(),
                        tool_name = runai.models.string_rules.StringRules(), ),
                    instances = runai.models.item_rules.ItemRules(
                        can_add = True,
                        locked = ["HOME","USER"], ), ),
                        exposed_urls=runai.models.exposed_urls_rules.ExposedUrlsRules(
                    attributes = runai.models.exposed_url_rules.ExposedUrlRules(
                        container = runai.models.integer_rules.IntegerRules(
                            source_of_rule = {"scope":"project","projectId":3},
                            required = True,
                            can_edit = True,
                            min = 56,
                            max = 56,
                            step = 56, ),
                        custom_url = runai.models.boolean_rules.BooleanRules(
                            required = True,
                            can_edit = True, ),
                        url = runai.models.string_rules.StringRules(),
                        authorized_users = runai.models.array_rules.ArrayRules(
                            required = True,
                            can_edit = True, ),
                        tool_type = runai.models.string_rules.StringRules(),
                        tool_name = runai.models.string_rules.StringRules(), ),
                    instances = runai.models.item_rules.ItemRules(
                        can_add = True,
                        locked = ["HOME","USER"], ), ),
                        related_urls=runai.models.related_urls_rules.RelatedUrlsRules(
                    attributes = runai.models.related_url_rules.RelatedUrlRules(
                        url = runai.models.string_rules.StringRules(),
                        type = runai.models.string_rules.StringRules(),
                        name = runai.models.string_rules.StringRules(), ),
                    instances = runai.models.item_rules.ItemRules(
                        source_of_rule = {"scope":"project","projectId":3},
                        can_add = True,
                        locked = ["HOME","USER"], ), )
        )
        ```
    """  # noqa: E501

    ports: Optional[PortsRules] = None
    exposed_urls: Optional[ExposedUrlsRules] = Field(default=None, alias="exposedUrls")
    related_urls: Optional[RelatedUrlsRules] = Field(default=None, alias="relatedUrls")
    __properties: ClassVar[List[str]] = ["ports", "exposedUrls", "relatedUrls"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConnectivityRules from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of ports
        if self.ports:
            _dict["ports"] = self.ports.to_dict()
        # override the default output from pydantic by calling `to_dict()` of exposed_urls
        if self.exposed_urls:
            _dict["exposedUrls"] = self.exposed_urls.to_dict()
        # override the default output from pydantic by calling `to_dict()` of related_urls
        if self.related_urls:
            _dict["relatedUrls"] = self.related_urls.to_dict()
        # set to None if ports (nullable) is None
        # and model_fields_set contains the field
        if self.ports is None and "ports" in self.model_fields_set:
            _dict["ports"] = None

        # set to None if exposed_urls (nullable) is None
        # and model_fields_set contains the field
        if self.exposed_urls is None and "exposed_urls" in self.model_fields_set:
            _dict["exposedUrls"] = None

        # set to None if related_urls (nullable) is None
        # and model_fields_set contains the field
        if self.related_urls is None and "related_urls" in self.model_fields_set:
            _dict["relatedUrls"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConnectivityRules from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "ports": (
                    PortsRules.from_dict(obj["ports"])
                    if obj.get("ports") is not None
                    else None
                ),
                "exposedUrls": (
                    ExposedUrlsRules.from_dict(obj["exposedUrls"])
                    if obj.get("exposedUrls") is not None
                    else None
                ),
                "relatedUrls": (
                    RelatedUrlsRules.from_dict(obj["relatedUrls"])
                    if obj.get("relatedUrls") is not None
                    else None
                ),
            }
        )
        return _obj
