# coding: utf-8

"""
    Runai API

    # Introduction  The Run:AI Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://docs.run.ai/latest/developer/rest-auth/#request-an-api-token). 

    The version of the OpenAPI document: 2.18
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from runai.models.department_all_of_status import DepartmentAllOfStatus
from runai.models.department_project_child import DepartmentProjectChild
from runai.models.resources import Resources
from typing import Optional, Set
from typing_extensions import Self


class GetDepartment200Response(BaseModel):
    """
    Pydantic class model representing GetDepartment200Response.

    Parameters:
        ```python
        resources: List[Resources]
        name: str
        cluster_id: str
        id: str
        created_at: datetime
        updated_at: datetime
        created_by: str
        updated_by: str
        children: Optional[List[DepartmentProjectChild]]
        projects_aggregated_resources: Optional[List[Resources]]
        status: DepartmentAllOfStatus
        ```
        resources: Resources assigned to this Organization per Node Pool
        name: See model str for more information.
        cluster_id: The id of the cluster.
        id: See model str for more information.
        created_at: See model datetime for more information.
        updated_at: See model datetime for more information.
        created_by: See model str for more information.
        updated_by: See model str for more information.
        children: See model List[DepartmentProjectChild] for more information.
        projects_aggregated_resources: Sum of all resources assigned to the projects under this department per Node Pool
        status: See model DepartmentAllOfStatus for more information.
    Example:
        ```python
        GetDepartment200Response(
            resources=[
                    runai.models.resources.Resources(
                        node_pool = runai.models.resources_node_pool.Resources_nodePool(
                            id = '22',
                            name = 'default', ),
                        gpu = null,
                        cpu = runai.models.resources_cpu.Resources_cpu(),
                        memory = runai.models.resources_memory.Resources_memory(), )
                    ],
                        name='organization1',
                        cluster_id='71f69d83-ba66-4822-adf5-55ce55efd210',
                        id='50',
                        created_at=datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                        updated_at=datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                        created_by='',
                        updated_by='',
                        children=[
                    runai.models.department_project_child.DepartmentProjectChild(
                        id = '9f55253e-11ed-47c7-acef-fc4054768dbc',
                        name = 'organization1',
                        children = [
                            runai.models.department_project_child.DepartmentProjectChild(
                                id = '9f55253e-11ed-47c7-acef-fc4054768dbc',
                                name = 'organization1', )
                            ], )
                    ],
                        projects_aggregated_resources=[
                    runai.models.resources.Resources(
                        node_pool = runai.models.resources_node_pool.Resources_nodePool(
                            id = '22',
                            name = 'default', ),
                        gpu = null,
                        cpu = runai.models.resources_cpu.Resources_cpu(),
                        memory = runai.models.resources_memory.Resources_memory(), )
                    ],
                        status=runai.models.department_all_of_status.Department_allOf_status(
                    node_pool_quota_statuses = [
                        null
                        ],
                    quota_status = runai.models.quota_status.QuotaStatus(
                        allocated = runai.models.quota_status_resource.QuotaStatusResource(
                            gpu = 0,
                            cpu = 1000,
                            memory = 1000, ),
                        allocated_non_preemptible = runai.models.quota_status_resource.QuotaStatusResource(
                            gpu = 0,
                            cpu = 1000,
                            memory = 1000, ),
                        requested = , ), )
        )
        ```
    """  # noqa: E501

    resources: Optional[List[Resources]] = Field(
        default=None,
        description="Resources assigned to this Organization per Node Pool",
    )
    name: StrictStr
    cluster_id: Optional[StrictStr] = Field(
        default=None, description="The id of the cluster.", alias="clusterId"
    )
    id: StrictStr
    created_at: datetime = Field(alias="createdAt")
    updated_at: datetime = Field(alias="updatedAt")
    created_by: Optional[StrictStr] = Field(default=None, alias="createdBy")
    updated_by: Optional[StrictStr] = Field(default=None, alias="updatedBy")
    children: Optional[List[DepartmentProjectChild]] = None
    projects_aggregated_resources: Optional[List[Resources]] = Field(
        default=None,
        description="Sum of all resources assigned to the projects under this department per Node Pool",
        alias="projectsAggregatedResources",
    )
    status: Optional[DepartmentAllOfStatus] = None
    __properties: ClassVar[List[str]] = [
        "resources",
        "name",
        "clusterId",
        "id",
        "createdAt",
        "updatedAt",
        "createdBy",
        "updatedBy",
        "children",
        "projectsAggregatedResources",
        "status",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetDepartment200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in resources (list)
        _items = []
        if self.resources:
            for _item_resources in self.resources:
                if _item_resources:
                    _items.append(_item_resources.to_dict())
            _dict["resources"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in children (list)
        _items = []
        if self.children:
            for _item_children in self.children:
                if _item_children:
                    _items.append(_item_children.to_dict())
            _dict["children"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in projects_aggregated_resources (list)
        _items = []
        if self.projects_aggregated_resources:
            for (
                _item_projects_aggregated_resources
            ) in self.projects_aggregated_resources:
                if _item_projects_aggregated_resources:
                    _items.append(_item_projects_aggregated_resources.to_dict())
            _dict["projectsAggregatedResources"] = _items
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict["status"] = self.status.to_dict()
        # set to None if children (nullable) is None
        # and model_fields_set contains the field
        if self.children is None and "children" in self.model_fields_set:
            _dict["children"] = None

        # set to None if projects_aggregated_resources (nullable) is None
        # and model_fields_set contains the field
        if (
            self.projects_aggregated_resources is None
            and "projects_aggregated_resources" in self.model_fields_set
        ):
            _dict["projectsAggregatedResources"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetDepartment200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "resources": (
                    [Resources.from_dict(_item) for _item in obj["resources"]]
                    if obj.get("resources") is not None
                    else None
                ),
                "name": obj.get("name"),
                "clusterId": obj.get("clusterId"),
                "id": obj.get("id"),
                "createdAt": obj.get("createdAt"),
                "updatedAt": obj.get("updatedAt"),
                "createdBy": obj.get("createdBy"),
                "updatedBy": obj.get("updatedBy"),
                "children": (
                    [
                        DepartmentProjectChild.from_dict(_item)
                        for _item in obj["children"]
                    ]
                    if obj.get("children") is not None
                    else None
                ),
                "projectsAggregatedResources": (
                    [
                        Resources.from_dict(_item)
                        for _item in obj["projectsAggregatedResources"]
                    ]
                    if obj.get("projectsAggregatedResources") is not None
                    else None
                ),
                "status": (
                    DepartmentAllOfStatus.from_dict(obj["status"])
                    if obj.get("status") is not None
                    else None
                ),
            }
        )
        return _obj
