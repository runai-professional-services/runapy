# coding: utf-8

"""
Runai API

# Introduction  The Run:AI Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://docs.run.ai/latest/developer/rest-auth/#request-an-api-token).

The version of the OpenAPI document: 2.2
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictStr,
    field_validator,
)
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self


class WorkloadSupportedTypes(BaseModel):
    """
    Pydantic class model representing WorkloadSupportedTypes.

    Parameters:
        ```python
        inference: Optional[bool]
        workspace: Optional[bool]
        training: Optional[bool]
        distributed: Optional[bool]
        dist_framework: Optional[str]
        ```
        inference: Is inference a supported workload type.
        workspace: Is workspace a supported workload type.
        training: Is training a supported workload type.
        distributed: Is distributed a supported workload type.
        dist_framework: The distributed training framework used in the workload.
    Example:
        ```python
        WorkloadSupportedTypes(
            inference=True,
                        workspace=True,
                        training=True,
                        distributed=True,
                        dist_framework='MPI'
        )
        ```
    """  # noqa: E501

    inference: Optional[StrictBool] = Field(
        default=None, description="Is inference a supported workload type."
    )
    workspace: Optional[StrictBool] = Field(
        default=None, description="Is workspace a supported workload type."
    )
    training: Optional[StrictBool] = Field(
        default=None, description="Is training a supported workload type."
    )
    distributed: Optional[StrictBool] = Field(
        default=None, description="Is distributed a supported workload type."
    )
    dist_framework: Optional[StrictStr] = Field(
        default=None,
        description="The distributed training framework used in the workload.",
        alias="distFramework",
    )
    __properties: ClassVar[List[str]] = [
        "inference",
        "workspace",
        "training",
        "distributed",
        "distFramework",
    ]

    @field_validator("dist_framework")
    def dist_framework_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["MPI", "PyTorch", "TF", "XGBoost"]):
            raise ValueError(
                "must be one of enum values ('MPI', 'PyTorch', 'TF', 'XGBoost')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkloadSupportedTypes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if inference (nullable) is None
        # and model_fields_set contains the field
        if self.inference is None and "inference" in self.model_fields_set:
            _dict["inference"] = None

        # set to None if workspace (nullable) is None
        # and model_fields_set contains the field
        if self.workspace is None and "workspace" in self.model_fields_set:
            _dict["workspace"] = None

        # set to None if training (nullable) is None
        # and model_fields_set contains the field
        if self.training is None and "training" in self.model_fields_set:
            _dict["training"] = None

        # set to None if distributed (nullable) is None
        # and model_fields_set contains the field
        if self.distributed is None and "distributed" in self.model_fields_set:
            _dict["distributed"] = None

        # set to None if dist_framework (nullable) is None
        # and model_fields_set contains the field
        if self.dist_framework is None and "dist_framework" in self.model_fields_set:
            _dict["distFramework"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkloadSupportedTypes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "inference": obj.get("inference"),
                "workspace": obj.get("workspace"),
                "training": obj.get("training"),
                "distributed": obj.get("distributed"),
                "distFramework": obj.get("distFramework"),
            }
        )
        return _obj
