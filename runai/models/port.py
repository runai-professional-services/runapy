# coding: utf-8

"""
    Runai API

    # Introduction  The Run:AI Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://docs.run.ai/latest/developer/rest-auth/#request-an-api-token). 

    The version of the OpenAPI document: 2.18
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from runai.models.port_service_type import PortServiceType
from typing import Optional, Set
from typing_extensions import Self


class Port(BaseModel):
    """
    Pydantic class model representing A port for accessing the workload..

    Parameters:
        ```python
        container: Optional[int]
        service_type: Optional[PortServiceType]
        external: Optional[int]
        tool_type: Optional[str]
        tool_name: Optional[str]
        name: Optional[str]
        ```
        container: The port that the container running the workload exposes. (mandatory)
        service_type: See model PortServiceType for more information.
        external: The external port which allows a connection to the container port. If not specified, the port will be auto-generated by the system..
        tool_type: The tool type that runs on this port.
        tool_name: A name describing the tool that runs on this port.
        name: Unique name to identify the instance. primarily used for policy locked rules.
    Example:
        ```python
        Port(
            container=8080,
                        service_type='LoadBalancer',
                        external=30080,
                        tool_type='pytorch',
                        tool_name='my-pytorch',
                        name='port-instance-a'
        )
        ```
    """  # noqa: E501

    container: Optional[Annotated[int, Field(le=65535, strict=True, ge=1)]] = Field(
        default=None,
        description="The port that the container running the workload exposes. (mandatory)",
    )
    service_type: Optional[PortServiceType] = Field(default=None, alias="serviceType")
    external: Optional[StrictInt] = Field(
        default=None,
        description="The external port which allows a connection to the container port. If not specified, the port will be auto-generated by the system..",
    )
    tool_type: Optional[StrictStr] = Field(
        default=None,
        description="The tool type that runs on this port.",
        alias="toolType",
    )
    tool_name: Optional[StrictStr] = Field(
        default=None,
        description="A name describing the tool that runs on this port.",
        alias="toolName",
    )
    name: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(
        default=None,
        description="Unique name to identify the instance. primarily used for policy locked rules.",
    )
    __properties: ClassVar[List[str]] = [
        "container",
        "serviceType",
        "external",
        "toolType",
        "toolName",
        "name",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Port from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if container (nullable) is None
        # and model_fields_set contains the field
        if self.container is None and "container" in self.model_fields_set:
            _dict["container"] = None

        # set to None if service_type (nullable) is None
        # and model_fields_set contains the field
        if self.service_type is None and "service_type" in self.model_fields_set:
            _dict["serviceType"] = None

        # set to None if external (nullable) is None
        # and model_fields_set contains the field
        if self.external is None and "external" in self.model_fields_set:
            _dict["external"] = None

        # set to None if tool_type (nullable) is None
        # and model_fields_set contains the field
        if self.tool_type is None and "tool_type" in self.model_fields_set:
            _dict["toolType"] = None

        # set to None if tool_name (nullable) is None
        # and model_fields_set contains the field
        if self.tool_name is None and "tool_name" in self.model_fields_set:
            _dict["toolName"] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict["name"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Port from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "container": obj.get("container"),
                "serviceType": obj.get("serviceType"),
                "external": obj.get("external"),
                "toolType": obj.get("toolType"),
                "toolName": obj.get("toolName"),
                "name": obj.get("name"),
            }
        )
        return _obj
