# coding: utf-8

"""
Runai API

# Introduction  The Run:AI Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://docs.run.ai/latest/developer/rest-auth/#request-an-api-token).

The version of the OpenAPI document: 2.2
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self


class NodepoolCalculatedFields(BaseModel):
    """
    Pydantic class model representing NodepoolCalculatedFields.

    Parameters:
        ```python
        id: str
        tenant_id: int
        cluster_name: str
        created_by: str
        created_at: datetime
        updated_by: str
        updated_at: datetime
        deleted_by: str
        deleted_at: Optional[datetime]
        is_default: bool
        ```
        id: The NodePool id
        tenant_id: The id of the tenant.
        cluster_name: See model str for more information.
        created_by: See model str for more information.
        created_at: See model datetime for more information.
        updated_by: See model str for more information.
        updated_at: See model datetime for more information.
        deleted_by: See model str for more information.
        deleted_at: See model datetime for more information.
        is_default: Is the Node Pool is the cluster default
    Example:
        ```python
        NodepoolCalculatedFields(
            id='5',
                        tenant_id=1,
                        cluster_name='prod-cluster',
                        created_by='user@lab.com',
                        created_at=datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                        updated_by='user@lab.com',
                        updated_at=datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                        deleted_by='user@lab.com',
                        deleted_at=datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                        is_default=False
        )
        ```
    """  # noqa: E501

    id: StrictStr = Field(description="The NodePool id")
    tenant_id: StrictInt = Field(description="The id of the tenant.", alias="tenantId")
    cluster_name: StrictStr = Field(alias="clusterName")
    created_by: StrictStr = Field(alias="createdBy")
    created_at: datetime = Field(alias="createdAt")
    updated_by: StrictStr = Field(alias="updatedBy")
    updated_at: datetime = Field(alias="updatedAt")
    deleted_by: Optional[StrictStr] = Field(default=None, alias="deletedBy")
    deleted_at: Optional[datetime] = Field(default=None, alias="deletedAt")
    is_default: StrictBool = Field(
        description="Is the Node Pool is the cluster default", alias="isDefault"
    )
    __properties: ClassVar[List[str]] = [
        "id",
        "tenantId",
        "clusterName",
        "createdBy",
        "createdAt",
        "updatedBy",
        "updatedAt",
        "deletedBy",
        "deletedAt",
        "isDefault",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NodepoolCalculatedFields from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "id",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if deleted_at (nullable) is None
        # and model_fields_set contains the field
        if self.deleted_at is None and "deleted_at" in self.model_fields_set:
            _dict["deletedAt"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NodepoolCalculatedFields from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "tenantId": obj.get("tenantId"),
                "clusterName": obj.get("clusterName"),
                "createdBy": obj.get("createdBy"),
                "createdAt": obj.get("createdAt"),
                "updatedBy": obj.get("updatedBy"),
                "updatedAt": obj.get("updatedAt"),
                "deletedBy": obj.get("deletedBy"),
                "deletedAt": obj.get("deletedAt"),
                "isDefault": obj.get("isDefault"),
            }
        )
        return _obj
