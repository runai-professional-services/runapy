# coding: utf-8

"""
Runai API

# Introduction  The Run:AI Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://docs.run.ai/latest/developer/rest-auth/#request-an-api-token).

The version of the OpenAPI document: 2.19
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from runai.models.asset_cluster_status_issue import AssetClusterStatusIssue
from runai.models.asset_sync_status_enum import AssetSyncStatusEnum
from typing import Optional, Set
from typing_extensions import Self


class AssetClusterStatusInfo(BaseModel):
    """
    Pydantic class model representing AssetClusterStatusInfo.

    Parameters:
        ```python
        status: AssetSyncStatusEnum
        issues: List[AssetClusterStatusIssue]
        message: str
        url: str
        ```
        status: See model AssetSyncStatusEnum for more information.
        issues: See model List[AssetClusterStatusIssue] for more information.
        message: See model str for more information.
        url: See model str for more information.
    Example:
        ```python
        AssetClusterStatusInfo(
            status='Issues found',
                        issues=[
                    runai.models.asset_cluster_status_issue.AssetClusterStatusIssue(
                        scope_id = '',
                        scope_type = 'system',
                        issue = 'ReplicationError', )
                    ],
                        message='',
                        url=''
        )
        ```
    """  # noqa: E501

    status: Optional[AssetSyncStatusEnum] = None
    issues: Optional[List[AssetClusterStatusIssue]] = None
    message: Optional[StrictStr] = None
    url: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["status", "issues", "message", "url"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AssetClusterStatusInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in issues (list)
        _items = []
        if self.issues:
            for _item_issues in self.issues:
                if _item_issues:
                    _items.append(_item_issues.to_dict())
            _dict["issues"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AssetClusterStatusInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "status": obj.get("status"),
                "issues": (
                    [
                        AssetClusterStatusIssue.from_dict(_item)
                        for _item in obj["issues"]
                    ]
                    if obj.get("issues") is not None
                    else None
                ),
                "message": obj.get("message"),
                "url": obj.get("url"),
            }
        )
        return _obj
