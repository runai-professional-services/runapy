# coding: utf-8

"""
Runai API

# Introduction  The Run:AI Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://docs.run.ai/latest/developer/rest-auth/#request-an-api-token).

The version of the OpenAPI document: 2.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from runai.models.pvc_volume_mode import PvcVolumeMode
from runai.models.volume_mode_customization_supported_values import (
    VolumeModeCustomizationSupportedValues,
)
from typing import Optional, Set
from typing_extensions import Self


class VolumeModeCustomization(BaseModel):
    """
    Pydantic class model representing VolumeModeCustomization.

    Parameters:
        ```python
        required: Optional[bool]
        default: Optional[PvcVolumeMode]
        supported_values: Optional[VolumeModeCustomizationSupportedValues]
        ```
        required: whether volumeMode field is mandatory
        default: See model PvcVolumeMode for more information.
        supported_values: See model VolumeModeCustomizationSupportedValues for more information.
    Example:
        ```python
        VolumeModeCustomization(
            required=True,
                        default='Filesystem',
                        supported_values=runai.models.volume_mode_customization_supported_values.VolumeModeCustomization_supportedValues(
                    filesystem = True,
                    block = True, )
        )
        ```
    """  # noqa: E501

    required: Optional[StrictBool] = Field(
        default=None, description="whether volumeMode field is mandatory"
    )
    default: Optional[PvcVolumeMode] = None
    supported_values: Optional[VolumeModeCustomizationSupportedValues] = Field(
        default=None, alias="supportedValues"
    )
    __properties: ClassVar[List[str]] = ["required", "default", "supportedValues"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VolumeModeCustomization from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of supported_values
        if self.supported_values:
            _dict["supportedValues"] = self.supported_values.to_dict()
        # set to None if required (nullable) is None
        # and model_fields_set contains the field
        if self.required is None and "required" in self.model_fields_set:
            _dict["required"] = None

        # set to None if default (nullable) is None
        # and model_fields_set contains the field
        if self.default is None and "default" in self.model_fields_set:
            _dict["default"] = None

        # set to None if supported_values (nullable) is None
        # and model_fields_set contains the field
        if (
            self.supported_values is None
            and "supported_values" in self.model_fields_set
        ):
            _dict["supportedValues"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VolumeModeCustomization from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "required": obj.get("required"),
                "default": obj.get("default"),
                "supportedValues": (
                    VolumeModeCustomizationSupportedValues.from_dict(
                        obj["supportedValues"]
                    )
                    if obj.get("supportedValues") is not None
                    else None
                ),
            }
        )
        return _obj
