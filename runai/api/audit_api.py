from typing import Optional, List
from datetime import datetime

from runai import models
from runai.api.runai_api_service import RunaiAPIService, deprecated_message


class AuditApi(RunaiAPIService):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        self._api_client = api_client

    @deprecated_message()
    def get_audit_logs(
        self,
        start: Optional[datetime] = None,
        end: Optional[datetime] = None,
        cluster_uuid: Optional[str] = None,
        action: Optional[str] = None,
        source_type: Optional[str] = None,
        source_id: Optional[str] = None,
        source_name: Optional[str] = None,
        entity_type: Optional[str] = None,
        entity_id: Optional[str] = None,
        limit: Optional[int] = None,
        offset: Optional[int] = None,
        success: Optional[str] = None,
        download: Optional[str] = None,
    ):
        r"""
        ## Deprecated endpoint, consider alternative method

        ### Description
        Get audit logs.

        ### Parameters:
        ```python
        start: Optional[datetime]
        end: Optional[datetime]
        cluster_uuid: Optional[str]
        action: Optional[str]
        source_type: Optional[str]
        source_id: Optional[str]
        source_name: Optional[str]
        entity_type: Optional[str]
        entity_id: Optional[str]
        limit: Optional[int]
        offset: Optional[int]
        success: Optional[str]
        download: Optional[str]
        ```
        start: Starting date for audit logs retrieval. format yyyy-MM-dd for date yyyy-MM-ddTHH:mm:ss for date-time.
        end: Ending date for audit logs retrieval. format yyyy-MM-dd for date yyyy-MM-ddTHH:mm:ss for date-time.
        cluster_uuid: The cluster uuid of the logged operation (for cluster related operations)
        action: The action of the logged operation.
        source_type: The type of the source of the action.
        source_id: The id of the source of the action.
        source_name: The name of the source of the action.
        entity_type: The type of the action related entity.
        entity_id: The id of the action related entity.
        limit: The maximum number of entries to return. - Default: 50
        offset: The offset of the first item returned in the collection.
        success: enter true for success audits and false for failures (leave blank for all)
        download: enter true to download the logs into logs.json file

        ### Example:
        ```python
        AuditApi(
            start='2022-06-07T09:01:02',
                        end='2022-06-07T09:01:02',
                        cluster_uuid='123e4567-e89b-12d3-a456-426614174000',
                        action='Create',
                        source_type='User',
                        source_id='96a4382e-afa5-4604-9eb1-c3071aa021fc',
                        source_name='test@run.ai',
                        entity_type='Department',
                        entity_id='51',
                        limit=50,
                        offset=100,
                        success='true',
                        download='true'
        )
        ```
        """

        # Query params:
        query_params = [
            ("start", start),
            ("end", end),
            ("clusterUuid", cluster_uuid),
            ("action", action),
            ("sourceType", source_type),
            ("sourceId", source_id),
            ("sourceName", source_name),
            ("entityType", entity_type),
            ("entityId", entity_id),
            ("limit", limit),
            ("offset", offset),
            ("success", success),
            ("download", download),
        ]
        resource_path = f"/v1/k8s/audit".replace("_", "-")
        method = "GET"
        return self._api_client.call_api(
            resource_path=resource_path, method=method, query_params=query_params
        )
