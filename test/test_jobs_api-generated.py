# coding: utf-8

"""
    Test file for JobsApi
    Generated by OpenAPI Generator with custom template
"""

import pytest
import unittest.mock as mock
from datetime import datetime, timezone
import json

from runai.configuration import Configuration
from runai.api_client import ApiClient
from runai.models import *
from runai.exceptions import ApiException


class TestJobsApi:
    """Test cases for JobsApi"""

    @pytest.fixture(autouse=True)
    def setup(self):
        """Setup test fixtures"""
        self.configuration = Configuration(
            client_id="test-client",
            client_secret="test-secret",
            runai_base_url="https://test.run.ai",
        )
        self.api_client = ApiClient(self.configuration)
        self.api = JobsApi(self.api_client)

        # Mock the request method
        self.request_patcher = mock.patch.object(self.api_client.rest_client, "request")
        self.mock_request = self.request_patcher.start()
        yield
        self.request_patcher.stop()

    def test_get_cluster_jobs_count(self):
        """Test case for get_cluster_jobs_count

        Return the number all Jobs in the cluster. Deprecated - please use api/v1/workloads/count instead
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        uuid = "uuid_example"  # str | Unique identifier of the cluster
        node_id = "node_id_example"  # str | Unique identifier of the node.
        filter = "filter_example"  # str |

        # Make request
        response = self.api.get_cluster_jobs_count(
            uuid=uuid,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/v1/k8s/clusters/{uuid}/jobs/count" in kwargs["url"]

        # Verify query parameters
        assert "nodeId=" in kwargs["url"]
        # Verify query parameters
        assert "filter=" in kwargs["url"]

        # Verify response
        assert isinstance(response, float)

    def test_get_cluster_jobs_count_error(self):
        """Test error handling for get_cluster_jobs_count"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        uuid = "uuid_example"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.get_cluster_jobs_count(
                uuid=uuid,
            )
        assert exc_info.value.status == 400

    def test_get_pods_by_job_id(self):
        """Test case for get_pods_by_job_id

        Get all pods that are associated for a specific job. Deprecated - please use api/v1/workloads/{workloadId}/pods instead
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        job_id = "job_id_example"  # str | Unique identifier of the job (UUID)
        uuid = "uuid_example"  # str | Unique identifier of the cluster
        id = "id_example"  # str | id
        pod_id = "pod_id_example"  # str | Unique identifier of the pod.
        pod_group_id = "pod_group_id_example"  # str | Identifier of the pod group.
        node_id = "node_id_example"  # str | Unique identifier of the node.
        name = "name_example"  # str | The name of the job.
        status = "status_example"  # str | The status of the job.

        # Make request
        response = self.api.get_pods_by_job_id(
            job_id=job_id,
            uuid=uuid,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/v1/k8s/clusters/{uuid}/jobs/{jobId}/pods" in kwargs["url"]

        # Verify query parameters
        assert "id=" in kwargs["url"]
        # Verify query parameters
        assert "podId=" in kwargs["url"]
        # Verify query parameters
        assert "podGroupId=" in kwargs["url"]
        # Verify query parameters
        assert "nodeID=" in kwargs["url"]
        # Verify query parameters
        assert "name=" in kwargs["url"]
        # Verify query parameters
        assert "status=" in kwargs["url"]

        # Verify response
        assert isinstance(response, List[Pod])

    def test_get_pods_by_job_id_error(self):
        """Test error handling for get_pods_by_job_id"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        job_id = "job_id_example"
        uuid = "uuid_example"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.get_pods_by_job_id(
                job_id=job_id,
                uuid=uuid,
            )
        assert exc_info.value.status == 400

    def test_list_jobs(self):
        """Test case for list_jobs

        List all Jobs in the cluster. Deprecated - please use api/v1/workloads instead
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        uuid = "uuid_example"  # str | Unique identifier of the cluster
        node_id = "node_id_example"  # str | Unique identifier of the node.
        filter = "filter_example"  # str |
        sort_by = "sort_by_example"  # str | Order of the results.
        sort_direction = "sort_direction_example"  # str |
        var_from = 3.4  # float | Start the response from a given number of result. Used along with 'limit' to retrieve the results paginated.
        limit = 3.4  # float | Limit the response to a given number of results.
        include_deleted = True  # bool | True to include deleted jobs in the result.

        # Make request
        response = self.api.list_jobs(
            uuid=uuid,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/v1/k8s/clusters/{uuid}/jobs" in kwargs["url"]

        # Verify query parameters
        assert "nodeId=" in kwargs["url"]
        # Verify query parameters
        assert "filter=" in kwargs["url"]
        # Verify query parameters
        assert "sortBy=" in kwargs["url"]
        # Verify query parameters
        assert "sortDirection=" in kwargs["url"]
        # Verify query parameters
        assert "from=" in kwargs["url"]
        # Verify query parameters
        assert "limit=" in kwargs["url"]
        # Verify query parameters
        assert "includeDeleted=" in kwargs["url"]

        # Verify response
        assert isinstance(response, List[DisplayedJob])

    def test_list_jobs_error(self):
        """Test error handling for list_jobs"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        uuid = "uuid_example"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.list_jobs(
                uuid=uuid,
            )
        assert exc_info.value.status == 400
