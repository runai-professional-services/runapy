# coding: utf-8

"""
Test file for AuditApi
Generated by OpenAPI Generator with custom template
"""

import pytest
import unittest.mock as mock
from datetime import datetime, timezone
import json

from runai.configuration import Configuration
from runai.api_client import ApiClient
from runai.models import *
from runai.exceptions import ApiException


class TestAuditApi:
    """Test cases for AuditApi"""

    @pytest.fixture(autouse=True)
    def setup(self):
        """Setup test fixtures"""
        self.configuration = Configuration(
            client_id="test-client",
            client_secret="test-secret",
            runai_base_url="https://test.run.ai",
        )
        self.api_client = ApiClient(self.configuration)
        self.api = AuditApi(self.api_client)

        # Mock the request method
        self.request_patcher = mock.patch.object(self.api_client.rest_client, "request")
        self.mock_request = self.request_patcher.start()
        yield
        self.request_patcher.stop()

    def test_get_audit_logs(self):
        """Test case for get_audit_logs

        Get audit logs. Retrieve audit logs using the query parameters.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        start = "2022-06-07T09:01:02"  # datetime | Starting date for audit logs retrieval. format yyyy-MM-dd for date yyyy-MM-ddTHH:mm:ss for date-time.
        end = "2022-06-07T09:01:02"  # datetime | Ending date for audit logs retrieval. format yyyy-MM-dd for date yyyy-MM-ddTHH:mm:ss for date-time.
        cluster_uuid = "123e4567-e89b-12d3-a456-426614174000"  # str | The cluster uuid of the logged operation (for cluster related operations)
        action = "Create"  # str | The action of the logged operation.
        source_type = "User"  # str | The type of the source of the action.
        source_id = "96a4382e-afa5-4604-9eb1-c3071aa021fc"  # str | The id of the source of the action.
        source_name = "test@run.ai"  # str | The name of the source of the action.
        entity_type = "Department"  # str | The type of the action related entity.
        entity_id = "51"  # str | The id of the action related entity.
        limit = 50  # int | The maximum number of entries to return.
        offset = 100  # int | The offset of the first item returned in the collection.
        success = "true"  # str | enter true for success audits and false for failures (leave blank for all)
        download = "true"  # str | enter true to download the logs into logs.json file

        # Make request
        response = self.api.get_audit_logs()

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/v1/k8s/audit" in kwargs["url"]

        # Verify query parameters
        assert "start=" in kwargs["url"]
        # Verify query parameters
        assert "end=" in kwargs["url"]
        # Verify query parameters
        assert "cluster_uuid=" in kwargs["url"]
        # Verify query parameters
        assert "action=" in kwargs["url"]
        # Verify query parameters
        assert "source_type=" in kwargs["url"]
        # Verify query parameters
        assert "source_id=" in kwargs["url"]
        # Verify query parameters
        assert "source_name=" in kwargs["url"]
        # Verify query parameters
        assert "entity_type=" in kwargs["url"]
        # Verify query parameters
        assert "entity_id=" in kwargs["url"]
        # Verify query parameters
        assert "limit=" in kwargs["url"]
        # Verify query parameters
        assert "offset=" in kwargs["url"]
        # Verify query parameters
        assert "success=" in kwargs["url"]
        # Verify query parameters
        assert "download=" in kwargs["url"]

        # Verify response
        assert isinstance(response, List[AuditLogRecord])

    def test_get_audit_logs_error(self):
        """Test error handling for get_audit_logs"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.get_audit_logs()
        assert exc_info.value.status == 400
