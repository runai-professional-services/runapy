# coding: utf-8

"""
Run:ai API

# Introduction  The Run:ai Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://docs.run.ai/latest/developer/rest-auth/#request-an-api-token).

The version of the OpenAPI document: latest
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


import unittest

import runai
from runai.models.displayed_job import DisplayedJob


class TestDisplayedJob(unittest.TestCase):
    """DisplayedJob unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DisplayedJob:
        """Test DisplayedJob
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `DisplayedJob`

        # model = DisplayedJob()
        if include_optional:
            return DisplayedJob(
                job_id="",
                pod_group_id="",
                job_name="job-0",
                job_type="",
                cluster_id="",
                status="",
                image_name="tensorflow",
                user="",
                project="",
                node_id="",
                creation_time="",
                completion_time="",
                total_runtime="",
                total_wait_time="",
                pending=1.337,
                running=1.337,
                parallelism=1.337,
                completions=1.337,
                failed=1.337,
                succeeded=1.337,
                current_allocated_gpus=1.337,
                current_allocated_gpus_memory=1.337,
                current_requested_gpus=1.337,
                total_requested_gpus=1.337,
                requested_gpus_per_pod_group=1.337,
                requested_gpus_memory_per_pod_group=1.337,
                parent_workload_name="",
                total_requested_memory=1.337,
                total_requested_cpu=1.337,
                total_limit_cpu=1.337,
                total_limit_memory=1.337,
                workload_kind=1.337,
                latest_pod=runai.models.pod.Pod(
                    pod_id="",
                    job_id="",
                    pod_group_id="",
                    cluster_uuid="",
                    pod_name="",
                    image_name="",
                    node_id="",
                    phase="",
                    status="",
                    created=56,
                    completed=56,
                    started=56,
                    last_updated=56,
                    dynamic_data=runai.models.dynamic_data.dynamicData(),
                    exists_in_cluster=True,
                    resource_request={"key": 1.337},
                    resource_allocation={"key": 1.337},
                    node_pool="",
                    namespace="",
                ),
                cli_command="",
                requested_mig_devices="",
                dynamic_data=None,
                exists_in_cluster=True,
                is_jupyter=True,
                job_url="",
                node_pool="",
            )
        else:
            return DisplayedJob()

    def testDisplayedJob(self):
        """Test DisplayedJob"""
        inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()
