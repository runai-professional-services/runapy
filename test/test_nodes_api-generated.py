# coding: utf-8

"""
    Test file for NodesApi
    Generated by OpenAPI Generator with custom template
"""

import pytest
import unittest.mock as mock
from datetime import datetime, timezone
import json

from runai.configuration import Configuration
from runai.api_client import ApiClient
from runai.models import *
from runai.exceptions import ApiException


class TestNodesApi:
    """Test cases for NodesApi"""

    @pytest.fixture(autouse=True)
    def setup(self):
        """Setup test fixtures"""
        self.configuration = Configuration(
            client_id="test-client",
            client_secret="test-secret",
            runai_base_url="https://test.run.ai",
        )
        self.api_client = ApiClient(self.configuration)
        self.api = NodesApi(self.api_client)

        # Mock the request method
        self.request_patcher = mock.patch.object(self.api_client.rest_client, "request")
        self.mock_request = self.request_patcher.start()
        yield
        self.request_patcher.stop()

    def test_get_node_telemetry(self):
        """Test case for get_node_telemetry

        Get node telemetry data. Retrieve node telemetry data for use in analysis applications.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        telemetry_type = (
            runai.NodeTelemetryType()
        )  # NodeTelemetryType | specifies what data to request
        cluster_id = "d73a738f-fab3-430a-8fa3-5241493d7128"  # str | Filter using the Universally Unique Identifier (UUID) of the cluster.
        nodepool_name = "default"  # str | Filter using the nodepool.
        group_by = [
            "group_by_example"
        ]  # List[str] | workload fields to group the data by

        # Make request
        response = self.api.get_node_telemetry(
            telemetry_type=telemetry_type,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/api/v1/nodes/telemetry" in kwargs["url"]

        # Verify query parameters
        assert "clusterId=" in kwargs["url"]
        # Verify query parameters
        assert "nodepoolName=" in kwargs["url"]
        # Verify query parameters
        assert "groupBy=" in kwargs["url"]
        # Verify query parameters
        assert "telemetryType=" in kwargs["url"]

        # Verify response
        assert isinstance(response, TelemetryResponse)

    def test_get_node_telemetry_error(self):
        """Test error handling for get_node_telemetry"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        telemetry_type = runai.NodeTelemetryType()

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.get_node_telemetry(
                telemetry_type=telemetry_type,
            )
        assert exc_info.value.status == 400

    def test_get_nodes(self):
        """Test case for get_nodes

        Get a list of nodes. Retrieve a list of nodes from the Kubernetes cluster.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        cluster_uuid = "9f55255e-11ed-47c7-acef-fc4054768dbc"  # str | The Universally Unique Identifier (UUID) of the cluster.
        node_name = "node_name_example"  # str | The node name.

        # Make request
        response = self.api.get_nodes(
            cluster_uuid=cluster_uuid,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/api/v1/clusters/{clusterUuid}/nodes" in kwargs["url"]

        # Verify query parameters
        assert "nodeName=" in kwargs["url"]

        # Verify response
        assert isinstance(response, Nodes)

    def test_get_nodes_error(self):
        """Test error handling for get_nodes"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        cluster_uuid = "9f55255e-11ed-47c7-acef-fc4054768dbc"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.get_nodes(
                cluster_uuid=cluster_uuid,
            )
        assert exc_info.value.status == 400
