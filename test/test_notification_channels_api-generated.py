# coding: utf-8

"""
Test file for NotificationChannelsApi
Generated by OpenAPI Generator with custom template
"""

import pytest
import unittest.mock as mock
from datetime import datetime, timezone
import json

from runai.configuration import Configuration
from runai.api_client import ApiClient
from runai.models import *
from runai.exceptions import ApiException


class TestNotificationChannelsApi:
    """Test cases for NotificationChannelsApi"""

    @pytest.fixture(autouse=True)
    def setup(self):
        """Setup test fixtures"""
        self.configuration = Configuration(
            client_id="test-client",
            client_secret="test-secret",
            runai_base_url="https://test.run.ai",
        )
        self.api_client = ApiClient(self.configuration)
        self.api = NotificationChannelsApi(self.api_client)

        # Mock the request method
        self.request_patcher = mock.patch.object(self.api_client.rest_client, "request")
        self.mock_request = self.request_patcher.start()
        yield
        self.request_patcher.stop()

    def test_create_notification_channel_config(self):
        """Test case for create_notification_channel_config

        Create configuration of notification channel Create configuration of notification channel
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({})
        self.mock_request.return_value = mock_response

        # Test parameters
        notification_channel = runai.NotificationChannel()  # NotificationChannel |

        # Make request
        self.api.create_notification_channel_config()

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "POST"
        assert "/api/v1/notification-channels" in kwargs["url"]

        # Verify body
        assert kwargs["body"] is not None

    def test_create_notification_channel_config_error(self):
        """Test error handling for create_notification_channel_config"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.create_notification_channel_config()
        assert exc_info.value.status == 400

    def test_delete_notification_channel_config(self):
        """Test case for delete_notification_channel_config

        Delete configuration of Notification Channel Delete configuration of Notification Channel
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({})
        self.mock_request.return_value = mock_response

        # Test parameters
        name = "name_example"  # str | Notification Channel name

        # Make request
        self.api.delete_notification_channel_config(
            name=name,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "DELETE"
        assert "/api/v1/notification-channels/{name}" in kwargs["url"]

    def test_delete_notification_channel_config_error(self):
        """Test error handling for delete_notification_channel_config"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        name = "name_example"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.delete_notification_channel_config(
                name=name,
            )
        assert exc_info.value.status == 400

    def test_get_notification_channel_config(self):
        """Test case for get_notification_channel_config

        Get configuration of notification channel Get configuration of notification channel
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        name = "name_example"  # str | Notification Channel name

        # Make request
        response = self.api.get_notification_channel_config(
            name=name,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/api/v1/notification-channels/{name}" in kwargs["url"]

        # Verify response
        assert isinstance(response, NotificationChannel)

    def test_get_notification_channel_config_error(self):
        """Test error handling for get_notification_channel_config"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        name = "name_example"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.get_notification_channel_config(
                name=name,
            )
        assert exc_info.value.status == 400

    def test_get_notification_channels(self):
        """Test case for get_notification_channels

        Get supported Notification Channels Get supported Notification Channels
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters

        # Make request
        response = self.api.get_notification_channels()

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/api/v1/notification-channels" in kwargs["url"]

        # Verify response
        assert isinstance(response, List[NotificationChannelMeta])

    def test_get_notification_channels_error(self):
        """Test error handling for get_notification_channels"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.get_notification_channels()
        assert exc_info.value.status == 400

    def test_patch_notification_channel_config(self):
        """Test case for patch_notification_channel_config

        Patch configuration of Notification Channel Patch configuration of Notification Channel
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({})
        self.mock_request.return_value = mock_response

        # Test parameters
        name = "name_example"  # str | Notification Channel name
        notification_channel_for_patch = (
            runai.NotificationChannelForPatch()
        )  # NotificationChannelForPatch |

        # Make request
        self.api.patch_notification_channel_config(
            name=name,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "PATCH"
        assert "/api/v1/notification-channels/{name}" in kwargs["url"]

        # Verify body
        assert kwargs["body"] is not None

    def test_patch_notification_channel_config_error(self):
        """Test error handling for patch_notification_channel_config"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        name = "name_example"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.patch_notification_channel_config(
                name=name,
            )
        assert exc_info.value.status == 400

    def test_update_notification_channel_config(self):
        """Test case for update_notification_channel_config

        Update configuration of Notification Channel Update configuration of Notification Channel
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({})
        self.mock_request.return_value = mock_response

        # Test parameters
        name = "name_example"  # str | Notification Channel name
        notification_channel = runai.NotificationChannel()  # NotificationChannel |

        # Make request
        self.api.update_notification_channel_config(
            name=name,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "PUT"
        assert "/api/v1/notification-channels/{name}" in kwargs["url"]

        # Verify body
        assert kwargs["body"] is not None

    def test_update_notification_channel_config_error(self):
        """Test error handling for update_notification_channel_config"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        name = "name_example"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.update_notification_channel_config(
                name=name,
            )
        assert exc_info.value.status == 400

    def test_validate_notification_channel(self):
        """Test case for validate_notification_channel

        Validate configuration of Notification Channel Validate configuration of Notification Channel
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        notification_channel_for_validate = (
            runai.NotificationChannelForValidate()
        )  # NotificationChannelForValidate |

        # Make request
        response = self.api.validate_notification_channel()

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "POST"
        assert "/api/v1/validate-notification-channel" in kwargs["url"]

        # Verify body
        assert kwargs["body"] is not None

        # Verify response
        assert isinstance(response, bool)

    def test_validate_notification_channel_error(self):
        """Test error handling for validate_notification_channel"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.validate_notification_channel()
        assert exc_info.value.status == 400
