# coding: utf-8

"""
Test file for WorkspacesApi
Generated by OpenAPI Generator with custom template
"""

import pytest
import unittest.mock as mock
from datetime import datetime, timezone
import json

from runai.configuration import Configuration
from runai.api_client import ApiClient
from runai.models import *
from runai.exceptions import ApiException


class TestWorkspacesApi:
    """Test cases for WorkspacesApi"""

    @pytest.fixture(autouse=True)
    def setup(self):
        """Setup test fixtures"""
        self.configuration = Configuration(
            client_id="test-client",
            client_secret="test-secret",
            runai_base_url="https://test.run.ai",
        )
        self.api_client = ApiClient(self.configuration)
        self.api = WorkspacesApi(self.api_client)

        # Mock the request method
        self.request_patcher = mock.patch.object(self.api_client.rest_client, "request")
        self.mock_request = self.request_patcher.start()
        yield
        self.request_patcher.stop()

    def test_create_workspace1(self):
        """Test case for create_workspace1

        Create a workspace. Create a new workspace in a specific project in the cluster.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        workspace_creation_request = (
            runai.WorkspaceCreationRequest()
        )  # WorkspaceCreationRequest |

        # Make request
        response = self.api.create_workspace1()

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "POST"
        assert "/api/v1/workloads/workspaces" in kwargs["url"]

        # Verify body
        assert kwargs["body"] is not None

        # Verify response
        assert isinstance(response, Workspace1)

    def test_create_workspace1_error(self):
        """Test error handling for create_workspace1"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.create_workspace1()
        assert exc_info.value.status == 400

    def test_delete_workspace(self):
        """Test case for delete_workspace

        Delete a workspace. Delete a workspace using the workspace id.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({})
        self.mock_request.return_value = mock_response

        # Test parameters
        workload_id = "workload_id_example"  # str | The  Universally Unique Identifier (UUID) of the workload.

        # Make request
        self.api.delete_workspace(
            workload_id=workload_id,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "DELETE"
        assert "/api/v1/workloads/workspaces/{workloadId}" in kwargs["url"]

    def test_delete_workspace_error(self):
        """Test error handling for delete_workspace"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        workload_id = "workload_id_example"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.delete_workspace(
                workload_id=workload_id,
            )
        assert exc_info.value.status == 400

    def test_get_workspace(self):
        """Test case for get_workspace

        Get workspace data. Retrieve workspace details using a workload id.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        workload_id = "workload_id_example"  # str | The  Universally Unique Identifier (UUID) of the workload.

        # Make request
        response = self.api.get_workspace(
            workload_id=workload_id,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/api/v1/workloads/workspaces/{workloadId}" in kwargs["url"]

        # Verify response
        assert isinstance(response, Workspace1)

    def test_get_workspace_error(self):
        """Test error handling for get_workspace"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        workload_id = "workload_id_example"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.get_workspace(
                workload_id=workload_id,
            )
        assert exc_info.value.status == 400

    def test_resume_workspace(self):
        """Test case for resume_workspace

        Resume a workspace. Resume the workspace operation using the workspace id.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        workload_id = "workload_id_example"  # str | The  Universally Unique Identifier (UUID) of the workload.

        # Make request
        response = self.api.resume_workspace(
            workload_id=workload_id,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "POST"
        assert "/api/v1/workloads/workspaces/{workloadId}/resume" in kwargs["url"]

        # Verify response
        assert isinstance(response, HttpResponse)

    def test_resume_workspace_error(self):
        """Test error handling for resume_workspace"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        workload_id = "workload_id_example"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.resume_workspace(
                workload_id=workload_id,
            )
        assert exc_info.value.status == 400

    def test_suspend_workspace(self):
        """Test case for suspend_workspace

        Suspend a workspace. Suspend a workspace using the workspace id.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        workload_id = "workload_id_example"  # str | The  Universally Unique Identifier (UUID) of the workload.

        # Make request
        response = self.api.suspend_workspace(
            workload_id=workload_id,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "POST"
        assert "/api/v1/workloads/workspaces/{workloadId}/suspend" in kwargs["url"]

        # Verify response
        assert isinstance(response, HttpResponse)

    def test_suspend_workspace_error(self):
        """Test error handling for suspend_workspace"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        workload_id = "workload_id_example"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.suspend_workspace(
                workload_id=workload_id,
            )
        assert exc_info.value.status == 400
