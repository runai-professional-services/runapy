# coding: utf-8

"""
Test file for RegistryApi
Generated by OpenAPI Generator with custom template
"""

import pytest
import unittest.mock as mock
from datetime import datetime, timezone
import json

from runai.configuration import Configuration
from runai.api_client import ApiClient
from runai.models import *
from runai.exceptions import ApiException


class TestRegistryApi:
    """Test cases for RegistryApi"""

    @pytest.fixture(autouse=True)
    def setup(self):
        """Setup test fixtures"""
        self.configuration = Configuration(
            client_id="test-client",
            client_secret="test-secret",
            runai_base_url="https://test.run.ai",
        )
        self.api_client = ApiClient(self.configuration)
        self.api = RegistryApi(self.api_client)

        # Mock the request method
        self.request_patcher = mock.patch.object(self.api_client.rest_client, "request")
        self.mock_request = self.request_patcher.start()
        yield
        self.request_patcher.stop()

    def test_create_registry(self):
        """Test case for create_registry

        Create a registry asset. Use to create a registry asset containing a registry base url and credentials.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        registry_creation_request = (
            runai.RegistryCreationRequest()
        )  # RegistryCreationRequest |

        # Make request
        response = self.api.create_registry(
            registry_creation_request=registry_creation_request,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "POST"
        assert "/api/v1/asset/registries" in kwargs["url"]

        # Verify body
        assert kwargs["body"] is not None

        # Verify response
        assert isinstance(response, Registry)

    def test_create_registry_error(self):
        """Test error handling for create_registry"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        registry_creation_request = runai.RegistryCreationRequest()

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.create_registry(
                registry_creation_request=registry_creation_request,
            )
        assert exc_info.value.status == 400

    def test_delete_registry(self):
        """Test case for delete_registry

        Delete a registry asset. Use to delete a registry asset containing registry base url and credentials by id.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({})
        self.mock_request.return_value = mock_response

        # Test parameters
        asset_id = "asset_id_example"  # str | Unique identifier of the asset.

        # Make request
        self.api.delete_registry(
            asset_id=asset_id,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "DELETE"
        assert "/api/v1/asset/registries/{AssetId}" in kwargs["url"]

    def test_delete_registry_error(self):
        """Test error handling for delete_registry"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        asset_id = "asset_id_example"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.delete_registry(
                asset_id=asset_id,
            )
        assert exc_info.value.status == 400

    def test_get_registry_by_id(self):
        """Test case for get_registry_by_id

        Get a registry. Retrieve a registry asset by id.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        asset_id = "asset_id_example"  # str | Unique identifier of the asset.

        # Make request
        response = self.api.get_registry_by_id(
            asset_id=asset_id,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/api/v1/asset/registries/{AssetId}" in kwargs["url"]

        # Verify response
        assert isinstance(response, Registry)

    def test_get_registry_by_id_error(self):
        """Test error handling for get_registry_by_id"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        asset_id = "asset_id_example"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.get_registry_by_id(
                asset_id=asset_id,
            )
        assert exc_info.value.status == 400

    def test_get_repositories(self):
        """Test case for get_repositories

        Get the repositories in the registry. Retrieve a list of repositories from a registry asset.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        asset_id = "asset_id_example"  # str | Unique identifier of the asset.
        search_name = (
            "search_name_example"  # str | Filter results that contains searchName.
        )

        # Make request
        response = self.api.get_repositories(
            asset_id=asset_id,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/api/v1/asset/registries/{AssetId}/repositories" in kwargs["url"]

        # Verify query parameters
        assert "searchName=" in kwargs["url"]

        # Verify response
        assert isinstance(response, Repositories)

    def test_get_repositories_error(self):
        """Test error handling for get_repositories"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        asset_id = "asset_id_example"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.get_repositories(
                asset_id=asset_id,
            )
        assert exc_info.value.status == 400

    def test_get_repository_tags(self):
        """Test case for get_repository_tags

        Get the repositories tags in the registry. Retrieve a list of repository tags from a repository asset.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        asset_id = "asset_id_example"  # str | Unique identifier of the asset.
        repository = "repository_example"  # str | The repository name that its tags are requested.
        search_name = (
            "search_name_example"  # str | Filter results that contains searchName.
        )

        # Make request
        response = self.api.get_repository_tags(
            asset_id=asset_id,
            repository=repository,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/api/v1/asset/registries/{AssetId}/repositories/tags" in kwargs["url"]

        # Verify query parameters
        assert "repository=" in kwargs["url"]
        # Verify query parameters
        assert "searchName=" in kwargs["url"]

        # Verify response
        assert isinstance(response, RepositoryTags)

    def test_get_repository_tags_error(self):
        """Test error handling for get_repository_tags"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        asset_id = "asset_id_example"
        repository = "repository_example"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.get_repository_tags(
                asset_id=asset_id,
                repository=repository,
            )
        assert exc_info.value.status == 400

    def test_list_registries(self):
        """Test case for list_registries

        Get registries. Retrieve a list of registries assets.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        name = "name_example"  # str | Filter results by name.

        # Make request
        response = self.api.list_registries()

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/api/v1/asset/registries" in kwargs["url"]

        # Verify query parameters
        assert "name=" in kwargs["url"]

        # Verify response
        assert isinstance(response, RegistryListResponse)

    def test_list_registries_error(self):
        """Test error handling for list_registries"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.list_registries()
        assert exc_info.value.status == 400

    def test_update_registry(self):
        """Test case for update_registry

        Update a registry asset. Use to update a registry asset containing registry base url and credentials by id.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        asset_id = "asset_id_example"  # str | Unique identifier of the asset.
        registry_update_request = (
            runai.RegistryUpdateRequest()
        )  # RegistryUpdateRequest |

        # Make request
        response = self.api.update_registry(
            asset_id=asset_id,
            registry_update_request=registry_update_request,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "PUT"
        assert "/api/v1/asset/registries/{AssetId}" in kwargs["url"]

        # Verify body
        assert kwargs["body"] is not None

        # Verify response
        assert isinstance(response, Registry)

    def test_update_registry_error(self):
        """Test error handling for update_registry"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        asset_id = "asset_id_example"
        registry_update_request = runai.RegistryUpdateRequest()

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.update_registry(
                asset_id=asset_id,
                registry_update_request=registry_update_request,
            )
        assert exc_info.value.status == 400
