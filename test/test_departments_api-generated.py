# coding: utf-8

"""
    Test file for DepartmentsApi
    Generated by OpenAPI Generator with custom template
"""

import pytest
import unittest.mock as mock
from datetime import datetime, timezone
import json

from runai.configuration import Configuration
from runai.api_client import ApiClient
from runai.models import *
from runai.exceptions import ApiException


class TestDepartmentsApi:
    """Test cases for DepartmentsApi"""

    @pytest.fixture(autouse=True)
    def setup(self):
        """Setup test fixtures"""
        self.configuration = Configuration(
            client_id="test-client",
            client_secret="test-secret",
            runai_base_url="https://test.run.ai",
        )
        self.api_client = ApiClient(self.configuration)
        self.api = DepartmentsApi(self.api_client)

        # Mock the request method
        self.request_patcher = mock.patch.object(self.api_client.rest_client, "request")
        self.mock_request = self.request_patcher.start()
        yield
        self.request_patcher.stop()

    def test_create_department(self):
        """Test case for create_department

        Create department Create Department
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        department_creation_request = (
            runai.DepartmentCreationRequest()
        )  # DepartmentCreationRequest | Department to create.

        # Make request
        response = self.api.create_department(
            department_creation_request=department_creation_request,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "POST"
        assert "/api/v1/org-unit/departments" in kwargs["url"]

        # Verify body
        assert kwargs["body"] is not None

        # Verify response
        assert isinstance(response, Department)

    def test_create_department_error(self):
        """Test error handling for create_department"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        department_creation_request = runai.DepartmentCreationRequest()

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.create_department(
                department_creation_request=department_creation_request,
            )
        assert exc_info.value.status == 400

    def test_create_department_0(self):
        """Test case for create_department_0

        Create a new department. Creates a new department in the cluster.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        cluster_id = "9f55255e-11ed-47c7-acef-fc4054768dbc"  # str | The unique uuid identifying the cluster.
        department_create_request = (
            runai.DepartmentCreateRequest()
        )  # DepartmentCreateRequest |

        # Make request
        response = self.api.create_department_0(
            cluster_id=cluster_id,
            department_create_request=department_create_request,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "POST"
        assert "/v1/k8s/clusters/{clusterId}/departments" in kwargs["url"]

        # Verify body
        assert kwargs["body"] is not None

        # Verify response
        assert isinstance(response, Department2)

    def test_create_department_0_error(self):
        """Test error handling for create_department_0"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        cluster_id = "9f55255e-11ed-47c7-acef-fc4054768dbc"
        department_create_request = runai.DepartmentCreateRequest()

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.create_department_0(
                cluster_id=cluster_id,
                department_create_request=department_create_request,
            )
        assert exc_info.value.status == 400

    def test_delete_department(self):
        """Test case for delete_department

        Delete department Delete department by Id
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({})
        self.mock_request.return_value = mock_response

        # Test parameters
        department_id = "1"  # str | The id of the department.

        # Make request
        self.api.delete_department(
            department_id=department_id,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "DELETE"
        assert "/api/v1/org-unit/departments/{departmentId}" in kwargs["url"]

    def test_delete_department_error(self):
        """Test error handling for delete_department"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        department_id = "1"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.delete_department(
                department_id=department_id,
            )
        assert exc_info.value.status == 400

    def test_delete_department_0(self):
        """Test case for delete_department_0

        Delete a department. Deletes a department from a specific cluster.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        cluster_id = "9f55255e-11ed-47c7-acef-fc4054768dbc"  # str | The unique uuid identifying the cluster.
        department_id = 2  # int | The unique id identifying the department.

        # Make request
        response = self.api.delete_department_0(
            cluster_id=cluster_id,
            department_id=department_id,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "DELETE"
        assert (
            "/v1/k8s/clusters/{clusterId}/departments/{department-id}" in kwargs["url"]
        )

        # Verify response
        assert isinstance(response, Department2)

    def test_delete_department_0_error(self):
        """Test error handling for delete_department_0"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        cluster_id = "9f55255e-11ed-47c7-acef-fc4054768dbc"
        department_id = 2

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.delete_department_0(
                cluster_id=cluster_id,
                department_id=department_id,
            )
        assert exc_info.value.status == 400

    def test_get_department(self):
        """Test case for get_department

        Get department Get department by Id
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        department_id = "1"  # str | The id of the department.

        # Make request
        response = self.api.get_department(
            department_id=department_id,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/api/v1/org-unit/departments/{departmentId}" in kwargs["url"]

        # Verify response
        assert isinstance(response, GetDepartment200Response)

    def test_get_department_error(self):
        """Test error handling for get_department"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        department_id = "1"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.get_department(
                department_id=department_id,
            )
        assert exc_info.value.status == 400

    def test_get_department_0(self):
        """Test case for get_department_0

        Get a specific department. Retrieves the details of a specific department. Requires  the&#x60;view&#x60; permission for the department.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        cluster_id = "9f55255e-11ed-47c7-acef-fc4054768dbc"  # str | The Universally Unique Identifier (UUID) of the cluster.
        department_id = 2  # int | The unique id of the department.
        exclude_permissions = true  # bool | backwards compatibility of the "departmentAdmins\' field. if \'true", will not set the "departmentAdmins\' field in the returned department. if \'false", will set the 'departmentAdmins' field in the returned department.

        # Make request
        response = self.api.get_department_0(
            cluster_id=cluster_id,
            department_id=department_id,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert (
            "/v1/k8s/clusters/{clusterId}/departments/{department-id}" in kwargs["url"]
        )

        # Verify query parameters
        assert "excludePermissions=" in kwargs["url"]

        # Verify response
        assert isinstance(response, Department2)

    def test_get_department_0_error(self):
        """Test error handling for get_department_0"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        cluster_id = "9f55255e-11ed-47c7-acef-fc4054768dbc"
        department_id = 2

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.get_department_0(
                cluster_id=cluster_id,
                department_id=department_id,
            )
        assert exc_info.value.status == 400

    def test_get_department_metrics(self):
        """Test case for get_department_metrics

        Get metrics for a specific department. Get metrics for a specific department in the cluster.  Use a time range to return historical data (optional). If you use a &#x60;start&#x60; date, an &#x60;end&#x60; date is required.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        cluster_uuid = "9f55255e-11ed-47c7-acef-fc4054768dbc"  # str | The Universally Unique Identifier (UUID) of the cluster.
        department_id = "1"  # str | The id of the department.
        start = "2013-10-20T19:20:30+01:00"  # datetime | Start of time range to fetch data from in UTC format.
        end = "2013-10-20T19:20:30+01:00"  # datetime | End of time range to fetch data from in UTC format.
        number_of_samples = (
            20  # int | The number of samples to take in the specified time range.
        )
        nodepool_name = "default"  # str | Filter by unique nodepool name.

        # Make request
        response = self.api.get_department_metrics(
            cluster_uuid=cluster_uuid,
            department_id=department_id,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert (
            "/v1/k8s/clusters/{clusterUuid}/departments/{departmentId}/metrics"
            in kwargs["url"]
        )

        # Verify query parameters
        assert "start=" in kwargs["url"]
        # Verify query parameters
        assert "end=" in kwargs["url"]
        # Verify query parameters
        assert "numberOfSamples=" in kwargs["url"]
        # Verify query parameters
        assert "nodepoolName=" in kwargs["url"]

        # Verify response
        assert isinstance(response, Department)

    def test_get_department_metrics_error(self):
        """Test error handling for get_department_metrics"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        cluster_uuid = "9f55255e-11ed-47c7-acef-fc4054768dbc"
        department_id = "1"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.get_department_metrics(
                cluster_uuid=cluster_uuid,
                department_id=department_id,
            )
        assert exc_info.value.status == 400

    def test_get_departments(self):
        """Test case for get_departments

        Get departments list departments
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        filter_by = [
            '["name!=some-name"]'
        ]  # List[str] | Filter results by a parameter. Use the format field-name operator value. Operators are == Equals, != Not equals, <= Less than or equal, >= Greater than or equal, =@ contains, !@ Does not contains, =^ Starts with and =$ Ends with. Dates are in ISO 8601 timestamp format and available for operators == None, != None, <= and >=.
        sort_by = "sort_by_example"  # str | Sort results by a parameters.
        sort_order = asc  # str | Sort results in descending or ascending order.
        offset = 100  # int | The offset of the first item returned in the collection.
        limit = 50  # int | The maximum number of entries to return.

        # Make request
        response = self.api.get_departments()

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/api/v1/org-unit/departments" in kwargs["url"]

        # Verify query parameters
        assert "filterBy=" in kwargs["url"]
        # Verify query parameters
        assert "sortBy=" in kwargs["url"]
        # Verify query parameters
        assert "sortOrder=" in kwargs["url"]
        # Verify query parameters
        assert "offset=" in kwargs["url"]
        # Verify query parameters
        assert "limit=" in kwargs["url"]

        # Verify response
        assert isinstance(response, GetDepartments200Response)

    def test_get_departments_error(self):
        """Test error handling for get_departments"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.get_departments()
        assert exc_info.value.status == 400

    def test_get_departments_0(self):
        """Test case for get_departments_0

        List all departments. List all the departments managed by the tenant on a specific cluster.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        cluster_id = "9f55255e-11ed-47c7-acef-fc4054768dbc"  # str | The Universally Unique Identifier (UUID) of the cluster.
        exclude_permissions = true  # bool | Backward compatibility of the `departmentAdmins` field. If `true`, the `departmentAdmins` field in the returned departments is not set. If `false`, the `departmentAdmins` is set in the returned departments.
        memory_unit_mb = true  # bool | Memory returned in MB. When set to `false` (default) memory will be returned in MiB.

        # Make request
        response = self.api.get_departments_0(
            cluster_id=cluster_id,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/v1/k8s/clusters/{clusterId}/departments" in kwargs["url"]

        # Verify query parameters
        assert "excludePermissions=" in kwargs["url"]
        # Verify query parameters
        assert "memoryUnitMb=" in kwargs["url"]

        # Verify response
        assert isinstance(response, List[Department2])

    def test_get_departments_0_error(self):
        """Test error handling for get_departments_0"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        cluster_id = "9f55255e-11ed-47c7-acef-fc4054768dbc"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.get_departments_0(
                cluster_id=cluster_id,
            )
        assert exc_info.value.status == 400

    def test_get_departments_metrics(self):
        """Test case for get_departments_metrics

        Get metrics for all departments. Get metrics for all departments in the cluster. Use a time range to return historical data (optional).  If you use a &#x60;start&#x60; date, an &#x60;end&#x60; date is required.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        cluster_uuid = "9f55255e-11ed-47c7-acef-fc4054768dbc"  # str | The Universally Unique Identifier (UUID) of the cluster.
        start = "2013-10-20T19:20:30+01:00"  # datetime | Start of time range to fetch data from in UTC format.
        end = "2013-10-20T19:20:30+01:00"  # datetime | End of time range to fetch data from in UTC format.
        number_of_samples = (
            20  # int | The number of samples to take in the specified time range.
        )
        nodepool_name = "default"  # str | Filter by unique nodepool name.

        # Make request
        response = self.api.get_departments_metrics(
            cluster_uuid=cluster_uuid,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/v1/k8s/clusters/{clusterUuid}/departments/metrics" in kwargs["url"]

        # Verify query parameters
        assert "start=" in kwargs["url"]
        # Verify query parameters
        assert "end=" in kwargs["url"]
        # Verify query parameters
        assert "numberOfSamples=" in kwargs["url"]
        # Verify query parameters
        assert "nodepoolName=" in kwargs["url"]

        # Verify response
        assert isinstance(response, Departments)

    def test_get_departments_metrics_error(self):
        """Test error handling for get_departments_metrics"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        cluster_uuid = "9f55255e-11ed-47c7-acef-fc4054768dbc"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.get_departments_metrics(
                cluster_uuid=cluster_uuid,
            )
        assert exc_info.value.status == 400

    def test_patch_department_resources(self):
        """Test case for patch_department_resources

        Patch department resources Partial updates to specific items in the list. Should be used for update one or more attributes of an item without modifying the entire resource.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        department_id = "1"  # str | The id of the department.
        resources = [
            runai.Resources()
        ]  # List[Resources] | Department resources to update.

        # Make request
        response = self.api.patch_department_resources(
            department_id=department_id,
            resources=resources,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "PATCH"
        assert "/api/v1/org-unit/departments/{departmentId}/resources" in kwargs["url"]

        # Verify body
        assert kwargs["body"] is not None

        # Verify response
        assert isinstance(response, List[Resources])

    def test_patch_department_resources_error(self):
        """Test error handling for patch_department_resources"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        department_id = "1"
        resources = [runai.Resources()]

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.patch_department_resources(
                department_id=department_id,
                resources=resources,
            )
        assert exc_info.value.status == 400

    def test_update_department(self):
        """Test case for update_department

        Update department Update department by Id
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        department_id = "1"  # str | The id of the department.
        department_update_request = (
            runai.DepartmentUpdateRequest()
        )  # DepartmentUpdateRequest | Department to update.

        # Make request
        response = self.api.update_department(
            department_id=department_id,
            department_update_request=department_update_request,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "PUT"
        assert "/api/v1/org-unit/departments/{departmentId}" in kwargs["url"]

        # Verify body
        assert kwargs["body"] is not None

        # Verify response
        assert isinstance(response, Department)

    def test_update_department_error(self):
        """Test error handling for update_department"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        department_id = "1"
        department_update_request = runai.DepartmentUpdateRequest()

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.update_department(
                department_id=department_id,
                department_update_request=department_update_request,
            )
        assert exc_info.value.status == 400

    def test_update_department_0(self):
        """Test case for update_department_0

        Update a department. Updates a department&#39;s details in the cluster. \\n For example, node pools and other details.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        cluster_id = "9f55255e-11ed-47c7-acef-fc4054768dbc"  # str | The unique uuid identifying the cluster.
        department_id = 2  # int | The unique id identifying the department.
        department_update_request1 = (
            runai.DepartmentUpdateRequest1()
        )  # DepartmentUpdateRequest1 |

        # Make request
        response = self.api.update_department_0(
            cluster_id=cluster_id,
            department_id=department_id,
            department_update_request1=department_update_request1,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "PUT"
        assert (
            "/v1/k8s/clusters/{clusterId}/departments/{department-id}" in kwargs["url"]
        )

        # Verify body
        assert kwargs["body"] is not None

        # Verify response
        assert isinstance(response, Department2)

    def test_update_department_0_error(self):
        """Test error handling for update_department_0"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        cluster_id = "9f55255e-11ed-47c7-acef-fc4054768dbc"
        department_id = 2
        department_update_request1 = runai.DepartmentUpdateRequest1()

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.update_department_0(
                cluster_id=cluster_id,
                department_id=department_id,
                department_update_request1=department_update_request1,
            )
        assert exc_info.value.status == 400

    def test_update_department_admins(self):
        """Test case for update_department_admins

        Set the department admins. Deprecated. Instead, use the accessrules API to add the department-admin permissions to a specific subject.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        cluster_id = "9f55255e-11ed-47c7-acef-fc4054768dbc"  # str | The unique uuid identifying the cluster.
        department_id = 2  # int | The unique id identifying the department.
        department_access_control = (
            runai.DepartmentAccessControl()
        )  # DepartmentAccessControl |

        # Make request
        response = self.api.update_department_admins(
            cluster_id=cluster_id,
            department_id=department_id,
            department_access_control=department_access_control,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "PUT"
        assert (
            "/v1/k8s/clusters/{clusterId}/departments/{department-id}/access-control"
            in kwargs["url"]
        )

        # Verify body
        assert kwargs["body"] is not None

        # Verify response
        assert isinstance(response, DepartmentAccessControl)

    def test_update_department_admins_error(self):
        """Test error handling for update_department_admins"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        cluster_id = "9f55255e-11ed-47c7-acef-fc4054768dbc"
        department_id = 2
        department_access_control = runai.DepartmentAccessControl()

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.update_department_admins(
                cluster_id=cluster_id,
                department_id=department_id,
                department_access_control=department_access_control,
            )
        assert exc_info.value.status == 400

    def test_update_department_resources(self):
        """Test case for update_department_resources

        Update department resources Update department resources by Id
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        department_id = "1"  # str | The id of the department.
        resources = [
            runai.Resources()
        ]  # List[Resources] | Department resources to update.

        # Make request
        response = self.api.update_department_resources(
            department_id=department_id,
            resources=resources,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "PUT"
        assert "/api/v1/org-unit/departments/{departmentId}/resources" in kwargs["url"]

        # Verify body
        assert kwargs["body"] is not None

        # Verify response
        assert isinstance(response, List[Resources])

    def test_update_department_resources_error(self):
        """Test error handling for update_department_resources"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        department_id = "1"
        resources = [runai.Resources()]

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.update_department_resources(
                department_id=department_id,
                resources=resources,
            )
        assert exc_info.value.status == 400
