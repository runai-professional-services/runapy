# coding: utf-8

"""
Test file for AuditLogsApi
Generated by OpenAPI Generator with custom template
"""

import pytest
import unittest.mock as mock
from datetime import datetime, timezone
import json

from runai.configuration import Configuration
from runai.api_client import ApiClient
from runai.models import *
from runai.exceptions import ApiException


class TestAuditLogsApi:
    """Test cases for AuditLogsApi"""

    @pytest.fixture(autouse=True)
    def setup(self):
        """Setup test fixtures"""
        self.configuration = Configuration(
            client_id="test-client",
            client_secret="test-secret",
            runai_base_url="https://test.run.ai",
        )
        self.api_client = ApiClient(self.configuration)
        self.api = AuditLogsApi(self.api_client)

        # Mock the request method
        self.request_patcher = mock.patch.object(self.api_client.rest_client, "request")
        self.mock_request = self.request_patcher.start()
        yield
        self.request_patcher.stop()

    def test_download_audit_logs(self):
        """Test case for download_audit_logs

        Download audit logs Download audit logs as a file, based on query params filter
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({})
        self.mock_request.return_value = mock_response

        # Test parameters
        start = "2023-06-06T12:09:18.211Z"  # datetime | Start date of time range to fetch data in ISO 8601 timestamp format.
        end = "2023-06-07T12:09:18.211Z"  # datetime | End date of time range to fetch data in ISO 8601 timestamp format.
        file_type = CSV  # str |
        number_of_samples = (
            20  # int | The number of samples to take in the specified time range.
        )
        filter_by = [
            '["cluster_name==my-cluster_name","entity_type==cluster,entity_name==test"]'
        ]  # List[str] | Filter results by a parameter. Use the format field-name operator value. Operators are == Equals, != Not equals, <= Less than or equal, >= Greater than or equal, =@ contains, !@ Does not contains, =^ Starts with and =$ Ends with. Dates are in ISO 8601 timestamp format and available for operators == None, != None, <= and >=.

        # Make request
        self.api.download_audit_logs(
            start=start,
            end=end,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/api/v1/audit/log/file" in kwargs["url"]

        # Verify query parameters
        assert "file_type=" in kwargs["url"]
        # Verify query parameters
        assert "start=" in kwargs["url"]
        # Verify query parameters
        assert "end=" in kwargs["url"]
        # Verify query parameters
        assert "numberOfSamples=" in kwargs["url"]
        # Verify query parameters
        assert "filterBy=" in kwargs["url"]

    def test_download_audit_logs_error(self):
        """Test error handling for download_audit_logs"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        start = "2023-06-06T12:09:18.211Z"
        end = "2023-06-07T12:09:18.211Z"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.download_audit_logs(
                start=start,
                end=end,
            )
        assert exc_info.value.status == 400

    def test_get_audit_logs1(self):
        """Test case for get_audit_logs1

        Get audit logs Get audit logs based on query params filter
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        start = "2023-06-06T12:09:18.211Z"  # datetime | Start date of time range to fetch data in ISO 8601 timestamp format.
        end = "2023-06-07T12:09:18.211Z"  # datetime | End date of time range to fetch data in ISO 8601 timestamp format.
        offset = 100  # int | The offset of the first item returned in the collection.
        number_of_samples = (
            20  # int | The number of samples to take in the specified time range.
        )
        sort_order = asc  # str | Sort results in descending or ascending order.
        sort_by = "sort_by_example"  # str | Sort results by a parameters.
        filter_by = [
            '["cluster_name==my-cluster_name","entity_type==cluster,entity_name==test"]'
        ]  # List[str] | Filter results by a parameter. Use the format field-name operator value. Operators are == Equals, != Not equals, <= Less than or equal, >= Greater than or equal, =@ contains, !@ Does not contains, =^ Starts with and =$ Ends with. Dates are in ISO 8601 timestamp format and available for operators == None, != None, <= and >=.

        # Make request
        response = self.api.get_audit_logs1(
            start=start,
            end=end,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/api/v1/audit/log" in kwargs["url"]

        # Verify query parameters
        assert "start=" in kwargs["url"]
        # Verify query parameters
        assert "end=" in kwargs["url"]
        # Verify query parameters
        assert "offset=" in kwargs["url"]
        # Verify query parameters
        assert "numberOfSamples=" in kwargs["url"]
        # Verify query parameters
        assert "sortOrder=" in kwargs["url"]
        # Verify query parameters
        assert "sortBy=" in kwargs["url"]
        # Verify query parameters
        assert "filterBy=" in kwargs["url"]

        # Verify response
        assert isinstance(response, GetAuditLogs1200Response)

    def test_get_audit_logs1_error(self):
        """Test error handling for get_audit_logs1"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        start = "2023-06-06T12:09:18.211Z"
        end = "2023-06-07T12:09:18.211Z"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.get_audit_logs1(
                start=start,
                end=end,
            )
        assert exc_info.value.status == 400
