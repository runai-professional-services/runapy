# coding: utf-8

"""
Runai API

# Introduction  The Run:AI Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://docs.run.ai/latest/developer/rest-auth/#request-an-api-token).

The version of the OpenAPI document: 2.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


import unittest

import runai
from runai.models.department_for_list import DepartmentForList


class TestDepartmentForList(unittest.TestCase):
    """DepartmentForList unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DepartmentForList:
        """Test DepartmentForList
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `DepartmentForList`

        # model = DepartmentForList()
        if include_optional:
            return DepartmentForList(
                description="",
                resources=[
                    runai.models.resources.Resources(
                        node_pool=runai.models.resources_node_pool.Resources_nodePool(
                            id="22",
                            name="default",
                        ),
                        gpu=None,
                        cpu=runai.models.resources_cpu.Resources_cpu(),
                        memory=runai.models.resources_memory.Resources_memory(),
                        priority="Normal",
                    )
                ],
                scheduling_rules=runai.models.scheduling_rules.SchedulingRules(
                    interactive_job_time_limit_seconds=100,
                    interactive_job_max_idle_duration_seconds=100,
                    interactive_job_preempt_idle_duration_seconds=100,
                    training_job_max_idle_duration_seconds=100,
                    training_job_time_limit_seconds=100,
                ),
                default_node_pools=[""],
                node_types=runai.models.node_types_per_workload.NodeTypesPerWorkload(
                    training=[""],
                    workspace=[""],
                    names={"key' : '"},
                ),
                name="organization1",
                cluster_id="71f69d83-ba66-4822-adf5-55ce55efd210",
                overtime_data=runai.models.overtime_data.OvertimeData(
                    range24h_data=runai.models.range24h_data.range24hData(),
                    range7d_data=runai.models.range7d_data.range7dData(),
                    range30d_data=runai.models.range30d_data.range30dData(),
                ),
                id="50",
                created_at=datetime.datetime.strptime(
                    "2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f"
                ),
                updated_at=datetime.datetime.strptime(
                    "2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f"
                ),
                created_by="",
                updated_by="",
                children=[
                    runai.models.department_project_child.DepartmentProjectChild(
                        id="9f55253e-11ed-47c7-acef-fc4054768dbc",
                        name="organization1",
                        children=[
                            runai.models.department_project_child.DepartmentProjectChild(
                                id="9f55253e-11ed-47c7-acef-fc4054768dbc",
                                name="organization1",
                            )
                        ],
                    )
                ],
                status=runai.models.department_for_list_all_of_status.DepartmentForList_allOf_status(
                    quota_status=runai.models.quota_status.QuotaStatus(
                        allocated=runai.models.quota_status_resource.QuotaStatusResource(
                            gpu=0,
                            cpu=1000,
                            memory=1000,
                        ),
                        allocated_non_preemptible=runai.models.quota_status_resource.QuotaStatusResource(
                            gpu=0,
                            cpu=1000,
                            memory=1000,
                        ),
                        requested=None,
                    ),
                ),
                total_resources=runai.models.total_resources.TotalResources(
                    gpu_quota=1.337,
                    cpu_quota=1.337,
                    memory_quota=1.337,
                ),
            )
        else:
            return DepartmentForList(
                resources=[
                    runai.models.resources.Resources(
                        node_pool=runai.models.resources_node_pool.Resources_nodePool(
                            id="22",
                            name="default",
                        ),
                        gpu=None,
                        cpu=runai.models.resources_cpu.Resources_cpu(),
                        memory=runai.models.resources_memory.Resources_memory(),
                        priority="Normal",
                    )
                ],
                name="organization1",
                cluster_id="71f69d83-ba66-4822-adf5-55ce55efd210",
                id="50",
                created_at=datetime.datetime.strptime(
                    "2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f"
                ),
                updated_at=datetime.datetime.strptime(
                    "2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f"
                ),
                total_resources=runai.models.total_resources.TotalResources(
                    gpu_quota=1.337,
                    cpu_quota=1.337,
                    memory_quota=1.337,
                ),
            )

    def testDepartmentForList(self):
        """Test DepartmentForList"""
        inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()
