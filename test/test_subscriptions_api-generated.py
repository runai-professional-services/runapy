# coding: utf-8

"""
Test file for SubscriptionsApi
Generated by OpenAPI Generator with custom template
"""

import pytest
import unittest.mock as mock
from datetime import datetime, timezone
import json

from runai.configuration import Configuration
from runai.api_client import ApiClient
from runai.models import *
from runai.exceptions import ApiException


class TestSubscriptionsApi:
    """Test cases for SubscriptionsApi"""

    @pytest.fixture(autouse=True)
    def setup(self):
        """Setup test fixtures"""
        self.configuration = Configuration(
            client_id="test-client",
            client_secret="test-secret",
            runai_base_url="https://test.run.ai",
        )
        self.api_client = ApiClient(self.configuration)
        self.api = SubscriptionsApi(self.api_client)

        # Mock the request method
        self.request_patcher = mock.patch.object(self.api_client.rest_client, "request")
        self.mock_request = self.request_patcher.start()
        yield
        self.request_patcher.stop()

    def test_create_subscription(self):
        """Test case for create_subscription

        Create user subscription Create user subscription
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        subscription = runai.Subscription()  # Subscription |

        # Make request
        response = self.api.create_subscription()

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "POST"
        assert "/api/v1/subscriptions" in kwargs["url"]

        # Verify body
        assert kwargs["body"] is not None

        # Verify response
        assert isinstance(response, Subscription)

    def test_create_subscription_error(self):
        """Test error handling for create_subscription"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.create_subscription()
        assert exc_info.value.status == 400

    def test_delete_subscription(self):
        """Test case for delete_subscription

        Delete user subscription Delete user subscription
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({})
        self.mock_request.return_value = mock_response

        # Test parameters
        id = "id_example"  # str | Subscription id

        # Make request
        self.api.delete_subscription(
            id=id,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "DELETE"
        assert "/api/v1/subscriptions/{id}" in kwargs["url"]

    def test_delete_subscription_error(self):
        """Test error handling for delete_subscription"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        id = "id_example"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.delete_subscription(
                id=id,
            )
        assert exc_info.value.status == 400

    def test_get_my_subscriptions(self):
        """Test case for get_my_subscriptions

        Get current users subscriptions Get current users subscriptions
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters

        # Make request
        response = self.api.get_my_subscriptions()

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/api/v1/subscriptions" in kwargs["url"]

        # Verify response
        assert isinstance(response, List[Subscription])

    def test_get_my_subscriptions_error(self):
        """Test error handling for get_my_subscriptions"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.get_my_subscriptions()
        assert exc_info.value.status == 400

    def test_update_subscription(self):
        """Test case for update_subscription

        Update user subscription Update user subscription
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        id = "id_example"  # str | Subscription id
        subscription_for_put = runai.SubscriptionForPut()  # SubscriptionForPut |

        # Make request
        response = self.api.update_subscription(
            id=id,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "PUT"
        assert "/api/v1/subscriptions/{id}" in kwargs["url"]

        # Verify body
        assert kwargs["body"] is not None

        # Verify response
        assert isinstance(response, Subscription)

    def test_update_subscription_error(self):
        """Test error handling for update_subscription"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        id = "id_example"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.update_subscription(
                id=id,
            )
        assert exc_info.value.status == 400
