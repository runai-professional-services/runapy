# coding: utf-8

"""
Runai API

# Introduction  The Run:AI Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://docs.run.ai/latest/developer/rest-auth/#request-an-api-token).

The version of the OpenAPI document: 2.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


import unittest

from runai.api.departments_api import DepartmentsApi


class TestDepartmentsApi(unittest.TestCase):
    """DepartmentsApi unit test stubs"""

    def setUp(self) -> None:
        self.api = DepartmentsApi()

    def tearDown(self) -> None:
        pass

    def test_count_departments(self) -> None:
        """Test case for count_departments

        Count departments
        """
        pass

    def test_create_department(self) -> None:
        """Test case for create_department

        Create department
        """
        pass

    def test_create_department_0(self) -> None:
        """Test case for create_department_0

        Create a new department.
        """
        pass

    def test_delete_department(self) -> None:
        """Test case for delete_department

        Delete department
        """
        pass

    def test_delete_department_0(self) -> None:
        """Test case for delete_department_0

        Delete a department.
        """
        pass

    def test_get_department(self) -> None:
        """Test case for get_department

        Get department
        """
        pass

    def test_get_department_0(self) -> None:
        """Test case for get_department_0

        Get a specific department.
        """
        pass

    def test_get_department_metrics(self) -> None:
        """Test case for get_department_metrics

        Get department metrics data.
        """
        pass

    def test_get_department_metrics_0(self) -> None:
        """Test case for get_department_metrics_0

        Get metrics for a specific department.
        """
        pass

    def test_get_departments(self) -> None:
        """Test case for get_departments

        Get departments
        """
        pass

    def test_get_departments_0(self) -> None:
        """Test case for get_departments_0

        List all departments.
        """
        pass

    def test_get_departments_metrics(self) -> None:
        """Test case for get_departments_metrics

        Get metrics for all departments.
        """
        pass

    def test_get_departments_telemetry(self) -> None:
        """Test case for get_departments_telemetry

        Get departments telemetry
        """
        pass

    def test_patch_department_resources(self) -> None:
        """Test case for patch_department_resources

        Patch department resources
        """
        pass

    def test_update_department(self) -> None:
        """Test case for update_department

        Update department
        """
        pass

    def test_update_department_0(self) -> None:
        """Test case for update_department_0

        Update a department.
        """
        pass

    def test_update_department_admins(self) -> None:
        """Test case for update_department_admins

        Set the department admins.
        """
        pass

    def test_update_department_resources(self) -> None:
        """Test case for update_department_resources

        Update department resources
        """
        pass


if __name__ == "__main__":
    unittest.main()
