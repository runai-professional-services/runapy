# coding: utf-8

"""
Test file for AccessRulesApi
Generated by OpenAPI Generator with custom template
"""

import pytest
import unittest.mock as mock
from datetime import datetime, timezone
import json

from runai.configuration import Configuration
from runai.api_client import ApiClient
from runai.models import *
from runai.exceptions import ApiException


class TestAccessRulesApi:
    """Test cases for AccessRulesApi"""

    @pytest.fixture(autouse=True)
    def setup(self):
        """Setup test fixtures"""
        self.configuration = Configuration(
            client_id="test-client",
            client_secret="test-secret",
            runai_base_url="https://test.run.ai",
        )
        self.api_client = ApiClient(self.configuration)
        self.api = AccessRulesApi(self.api_client)

        # Mock the request method
        self.request_patcher = mock.patch.object(self.api_client.rest_client, "request")
        self.mock_request = self.request_patcher.start()
        yield
        self.request_patcher.stop()

    def test_count_access_rules(self):
        """Test case for count_access_rules

        Count access rules. Use to retrieve the number of access rules.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        include_deleted = False  # bool | True to include deleted objects in the result.
        filter_by = [
            '["name!=some-access-rule-name","createdAt>=2023-01-01T00:00:00Z"]'
        ]  # List[str] | Filter results by a parameter. Use the format field-name operator value. Operators are == Equals, != Not equals, <= Less than or equal, >= Greater than or equal, =@ contains, !@ Does not contains, =^ Starts with and =$ Ends with. Dates are in ISO 8601 timestamp format and available for operators == None, != None, <= and >=.

        # Make request
        response = self.api.count_access_rules()

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/api/v1/authorization/access-rules/count" in kwargs["url"]

        # Verify query parameters
        assert "includeDeleted=" in kwargs["url"]
        # Verify query parameters
        assert "filterBy=" in kwargs["url"]

        # Verify response
        assert isinstance(response, CountDepartments200Response)

    def test_count_access_rules_error(self):
        """Test error handling for count_access_rules"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.count_access_rules()
        assert exc_info.value.status == 400

    def test_create_access_rule(self):
        """Test case for create_access_rule

        Create an access rule. Use to bind a predefined role to a subject (user, group or application) in a scope.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        access_rule_creation_fields = (
            runai.AccessRuleCreationFields()
        )  # AccessRuleCreationFields | The access rule to create.

        # Make request
        response = self.api.create_access_rule(
            access_rule_creation_fields=access_rule_creation_fields,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "POST"
        assert "/api/v1/authorization/access-rules" in kwargs["url"]

        # Verify body
        assert kwargs["body"] is not None

        # Verify response
        assert isinstance(response, AccessRule)

    def test_create_access_rule_error(self):
        """Test error handling for create_access_rule"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        access_rule_creation_fields = runai.AccessRuleCreationFields()

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.create_access_rule(
                access_rule_creation_fields=access_rule_creation_fields,
            )
        assert exc_info.value.status == 400

    def test_delete_access_rule(self):
        """Test case for delete_access_rule

        Delete an access rule. Use to delete the subject permissions assigned by access rule id.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({})
        self.mock_request.return_value = mock_response

        # Test parameters
        access_rule_id = 32  # int | The id of the access rule to retrieve

        # Make request
        self.api.delete_access_rule(
            access_rule_id=access_rule_id,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "DELETE"
        assert "/api/v1/authorization/access-rules/{accessRuleId}" in kwargs["url"]

    def test_delete_access_rule_error(self):
        """Test error handling for delete_access_rule"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        access_rule_id = 32

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.delete_access_rule(
                access_rule_id=access_rule_id,
            )
        assert exc_info.value.status == 400

    def test_get_access_rule(self):
        """Test case for get_access_rule

        Get an access rule. Use to retrieve the details of an access rule by id.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        access_rule_id = 32  # int | The id of the access rule to retrieve

        # Make request
        response = self.api.get_access_rule(
            access_rule_id=access_rule_id,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/api/v1/authorization/access-rules/{accessRuleId}" in kwargs["url"]

        # Verify response
        assert isinstance(response, AccessRuleById)

    def test_get_access_rule_error(self):
        """Test error handling for get_access_rule"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        access_rule_id = 32

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.get_access_rule(
                access_rule_id=access_rule_id,
            )
        assert exc_info.value.status == 400

    def test_get_access_rules(self):
        """Test case for get_access_rules

        List the access rules. Retrieve a list of access rules.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        subject_type = "user"  # str | The type of resource we want to filter by.
        subject_id_filter = (
            "some.user"  # str | Part of the subject id that we want to filter by.
        )
        subject_ids = [
            "subject_ids_example"
        ]  # List[str] | The ids of the subjects to filter the response for.
        limit = 50  # int | The maximum number of entries to return.
        offset = 100  # int | The offset of the first item returned in the collection.
        last_updated = "2021-12-14T16:04:15.099Z"  # str | Filter by last update time.
        include_deleted = False  # bool | True to include deleted objects in the result.
        cluster_id = "d73a738f-fab3-430a-8fa3-5241493d7128"  # str | Filter using the Universally Unique Identifier (UUID) of the cluster.
        scope_type = "project"  # str | The type of resource we want to filter by.
        scope_id = "2"  # str | The scope resource id that we want to filter by.
        role_id = 56  # int | The role id we want to filter by.
        sort_order = asc  # str | Sort results in descending or ascending order.
        sort_by = (
            runai.AccessRulesSortFilterFields()
        )  # AccessRulesSortFilterFields | Sort results by a parameter.
        filter_by = [
            '["name!=some-access-rule-name","createdAt>=2023-01-01T00:00:00Z"]'
        ]  # List[str] | Filter results by a parameter. Use the format field-name operator value. Operators are == Equals, != Not equals, <= Less than or equal, >= Greater than or equal, =@ contains, !@ Does not contains, =^ Starts with and =$ Ends with. Dates are in ISO 8601 timestamp format and available for operators == None, != None, <= and >=.

        # Make request
        response = self.api.get_access_rules()

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/api/v1/authorization/access-rules" in kwargs["url"]

        # Verify query parameters
        assert "subjectType=" in kwargs["url"]
        # Verify query parameters
        assert "subjectIdFilter=" in kwargs["url"]
        # Verify query parameters
        assert "subjectIds=" in kwargs["url"]
        # Verify query parameters
        assert "limit=" in kwargs["url"]
        # Verify query parameters
        assert "offset=" in kwargs["url"]
        # Verify query parameters
        assert "lastUpdated=" in kwargs["url"]
        # Verify query parameters
        assert "includeDeleted=" in kwargs["url"]
        # Verify query parameters
        assert "clusterId=" in kwargs["url"]
        # Verify query parameters
        assert "scopeType=" in kwargs["url"]
        # Verify query parameters
        assert "scopeId=" in kwargs["url"]
        # Verify query parameters
        assert "roleId=" in kwargs["url"]
        # Verify query parameters
        assert "sortOrder=" in kwargs["url"]
        # Verify query parameters
        assert "sortBy=" in kwargs["url"]
        # Verify query parameters
        assert "filterBy=" in kwargs["url"]

        # Verify response
        assert isinstance(response, GetAccessRules200Response)

    def test_get_access_rules_error(self):
        """Test error handling for get_access_rules"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.get_access_rules()
        assert exc_info.value.status == 400
