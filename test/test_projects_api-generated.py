# coding: utf-8

"""
Test file for ProjectsApi
Generated by OpenAPI Generator with custom template
"""

import pytest
import unittest.mock as mock
from datetime import datetime, timezone
import json

from runai.configuration import Configuration
from runai.api_client import ApiClient
from runai.models import *
from runai.exceptions import ApiException


class TestProjectsApi:
    """Test cases for ProjectsApi"""

    @pytest.fixture(autouse=True)
    def setup(self):
        """Setup test fixtures"""
        self.configuration = Configuration(
            client_id="test-client",
            client_secret="test-secret",
            runai_base_url="https://test.run.ai",
        )
        self.api_client = ApiClient(self.configuration)
        self.api = ProjectsApi(self.api_client)

        # Mock the request method
        self.request_patcher = mock.patch.object(self.api_client.rest_client, "request")
        self.mock_request = self.request_patcher.start()
        yield
        self.request_patcher.stop()

    def test_count_projects(self):
        """Test case for count_projects

        Count projects count projects
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        filter_by = [
            '["name!=some-name"]'
        ]  # List[str] | Filter results by a parameter. Use the format field-name operator value. Operators are == Equals, != Not equals, <= Less than or equal, >= Greater than or equal, =@ contains, !@ Does not contains, =^ Starts with and =$ Ends with. Dates are in ISO 8601 timestamp format and available for operators == None, != None, <= and >=.

        # Make request
        response = self.api.count_projects()

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/api/v1/org-unit/projects/count" in kwargs["url"]

        # Verify query parameters
        assert "filterBy=" in kwargs["url"]

        # Verify response
        assert isinstance(response, CountDepartments200Response)

    def test_count_projects_error(self):
        """Test error handling for count_projects"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.count_projects()
        assert exc_info.value.status == 400

    def test_create_project(self):
        """Test case for create_project

        Create project Create a project
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        project_creation_request = (
            runai.ProjectCreationRequest()
        )  # ProjectCreationRequest | Project to create.

        # Make request
        response = self.api.create_project(
            project_creation_request=project_creation_request,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "POST"
        assert "/api/v1/org-unit/projects" in kwargs["url"]

        # Verify body
        assert kwargs["body"] is not None

        # Verify response
        assert isinstance(response, Project)

    def test_create_project_error(self):
        """Test error handling for create_project"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        project_creation_request = runai.ProjectCreationRequest()

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.create_project(
                project_creation_request=project_creation_request,
            )
        assert exc_info.value.status == 400

    def test_create_project_0(self):
        """Test case for create_project_0

        Create a new project. Creates a new project in a specific cluster. Deprecated - use &#x60;/api/v1/org-unit/projects&#x60; instead.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        cluster_id = "9f55255e-11ed-47c7-acef-fc4054768dbc"  # str | The Universally Unique Identifier (UUID) of the cluster.
        project_create_request = runai.ProjectCreateRequest()  # ProjectCreateRequest |
        exclude_permissions = true  # bool | Backward compatibility of the `permissions` field. If `true`, the `permissions` field in the request body is ignored. If `false`, relevant access rules for the `permissions` field are created in the project scope.

        # Make request
        response = self.api.create_project_0(
            cluster_id=cluster_id,
            project_create_request=project_create_request,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "POST"
        assert "/v1/k8s/clusters/{clusterId}/projects" in kwargs["url"]

        # Verify query parameters
        assert "excludePermissions=" in kwargs["url"]

        # Verify body
        assert kwargs["body"] is not None

        # Verify response
        assert isinstance(response, Project2)

    def test_create_project_0_error(self):
        """Test error handling for create_project_0"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        cluster_id = "9f55255e-11ed-47c7-acef-fc4054768dbc"
        project_create_request = runai.ProjectCreateRequest()

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.create_project_0(
                cluster_id=cluster_id,
                project_create_request=project_create_request,
            )
        assert exc_info.value.status == 400

    def test_delete_project(self):
        """Test case for delete_project

        Delete project Delete a project
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({})
        self.mock_request.return_value = mock_response

        # Test parameters
        project_id = "575c19e8-c7c3-45b0-8290-2f47397a8383"  # str | The project id

        # Make request
        self.api.delete_project(
            project_id=project_id,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "DELETE"
        assert "/api/v1/org-unit/projects/{projectId}" in kwargs["url"]

    def test_delete_project_error(self):
        """Test error handling for delete_project"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        project_id = "575c19e8-c7c3-45b0-8290-2f47397a8383"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.delete_project(
                project_id=project_id,
            )
        assert exc_info.value.status == 400

    def test_delete_project_0(self):
        """Test case for delete_project_0

        Delete a project. Deletes a project from a specific cluster. Deprecated - use &#x60;/api/v1/org-unit/projects/{projectId}&#x60; instead.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        cluster_id = "9f55255e-11ed-47c7-acef-fc4054768dbc"  # str | The Universally Unique Identifier (UUID) of the cluster.
        id = 2  # int | The unique id of the project.

        # Make request
        response = self.api.delete_project_0(
            cluster_id=cluster_id,
            id=id,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "DELETE"
        assert "/v1/k8s/clusters/{clusterId}/projects/{id}" in kwargs["url"]

        # Verify response
        assert isinstance(response, Project2)

    def test_delete_project_0_error(self):
        """Test error handling for delete_project_0"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        cluster_id = "9f55255e-11ed-47c7-acef-fc4054768dbc"
        id = 2

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.delete_project_0(
                cluster_id=cluster_id,
                id=id,
            )
        assert exc_info.value.status == 400

    def test_get_project(self):
        """Test case for get_project

        Get project Get a project by id
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        project_id = "575c19e8-c7c3-45b0-8290-2f47397a8383"  # str | The project id

        # Make request
        response = self.api.get_project(
            project_id=project_id,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/api/v1/org-unit/projects/{projectId}" in kwargs["url"]

        # Verify response
        assert isinstance(response, Project)

    def test_get_project_error(self):
        """Test error handling for get_project"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        project_id = "575c19e8-c7c3-45b0-8290-2f47397a8383"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.get_project(
                project_id=project_id,
            )
        assert exc_info.value.status == 400

    def test_get_project_0(self):
        """Test case for get_project_0

        List details of a specific project. Retrieves the details of a specific project from a specific cluster. Use for project analysis. **Requires &#x60;view&#x60; permissions to the queried project**. Deprecated - use &#x60;/api/v1/org-unit/projects/{projectId}&#x60; instead.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        cluster_id = "9f55255e-11ed-47c7-acef-fc4054768dbc"  # str | The Universally Unique Identifier (UUID) of the cluster.
        id = "id_example"  # str | The unique project-id identifying the project.
        exclude_permissions = true  # bool | Backward compatibility of the "permissions\' field. If \'true", the "permissions\' field in the returned projects is not set. If \'false", the 'permissions' field is set in the returned projects.

        # Make request
        response = self.api.get_project_0(
            cluster_id=cluster_id,
            id=id,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/v1/k8s/clusters/{clusterId}/projects/{id}" in kwargs["url"]

        # Verify query parameters
        assert "excludePermissions=" in kwargs["url"]

        # Verify response
        assert isinstance(response, Project2)

    def test_get_project_0_error(self):
        """Test error handling for get_project_0"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        cluster_id = "9f55255e-11ed-47c7-acef-fc4054768dbc"
        id = "id_example"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.get_project_0(
                cluster_id=cluster_id,
                id=id,
            )
        assert exc_info.value.status == 400

    def test_get_project_metrics(self):
        """Test case for get_project_metrics

        Get metrics data for a specific project. Retrieves data from the metrics database. \\n Use in reporting and analysis tools. \\n Use a time range to return historical data (optional). If you use a &#x60;start&#x60; date, an &#x60;end&#x60; date is required.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        cluster_uuid = "9f55255e-11ed-47c7-acef-fc4054768dbc"  # str | The Universally Unique Identifier (UUID) of the cluster.
        project_id = "project_id_example"  # str | The unique project-id of the project.
        start = "2013-10-20T19:20:30+01:00"  # datetime | Start of time range to fetch data from in UTC format.
        end = "2013-10-20T19:20:30+01:00"  # datetime | End of time range to fetch data from in UTC format.
        number_of_samples = (
            20  # int | The number of samples to take in the specified time range.
        )
        nodepool_name = "default"  # str | Filter by unique nodepool name.

        # Make request
        response = self.api.get_project_metrics(
            cluster_uuid=cluster_uuid,
            project_id=project_id,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert (
            "/v1/k8s/clusters/{clusterUuid}/projects/{projectId}/metrics"
            in kwargs["url"]
        )

        # Verify query parameters
        assert "start=" in kwargs["url"]
        # Verify query parameters
        assert "end=" in kwargs["url"]
        # Verify query parameters
        assert "numberOfSamples=" in kwargs["url"]
        # Verify query parameters
        assert "nodepoolName=" in kwargs["url"]

        # Verify response
        assert isinstance(response, Project)

    def test_get_project_metrics_error(self):
        """Test error handling for get_project_metrics"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        cluster_uuid = "9f55255e-11ed-47c7-acef-fc4054768dbc"
        project_id = "project_id_example"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.get_project_metrics(
                cluster_uuid=cluster_uuid,
                project_id=project_id,
            )
        assert exc_info.value.status == 400

    def test_get_projects(self):
        """Test case for get_projects

        Get projects List projects
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        filter_by = [
            '["name!=some-name"]'
        ]  # List[str] | Filter results by a parameter. Use the format field-name operator value. Operators are == Equals, != Not equals, <= Less than or equal, >= Greater than or equal, =@ contains, !@ Does not contains, =^ Starts with and =$ Ends with. Dates are in ISO 8601 timestamp format and available for operators == None, != None, <= and >=.
        sort_by = (
            runai.ProjectFilterSortFields()
        )  # ProjectFilterSortFields | Sort results by a parameters.
        sort_order = asc  # str | Sort results in descending or ascending order.
        offset = 100  # int | The offset of the first item returned in the collection.
        limit = 50  # int | The maximum number of entries to return.

        # Make request
        response = self.api.get_projects()

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/api/v1/org-unit/projects" in kwargs["url"]

        # Verify query parameters
        assert "filterBy=" in kwargs["url"]
        # Verify query parameters
        assert "sortBy=" in kwargs["url"]
        # Verify query parameters
        assert "sortOrder=" in kwargs["url"]
        # Verify query parameters
        assert "offset=" in kwargs["url"]
        # Verify query parameters
        assert "limit=" in kwargs["url"]

        # Verify response
        assert isinstance(response, GetProjects200Response)

    def test_get_projects_error(self):
        """Test error handling for get_projects"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.get_projects()
        assert exc_info.value.status == 400

    def test_get_projects_0(self):
        """Test case for get_projects_0

        List all projects and their details. Retrieves a list of all projects and details from a specific cluster. Use in reporting and analysis tools. Deprecated - use &#x60;/api/v1/org-unit/projects&#x60; instead.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        cluster_id = "9f55255e-11ed-47c7-acef-fc4054768dbc"  # str | The Universally Unique Identifier (UUID) of the cluster.
        exclude_permissions = true  # bool | Backward compatibility of the "permissions\' field. If \'true", the "permissions\' field in the returned projects is not set. If \'false", the 'permissions' field is set in the returned projects.
        memory_unit_mb = true  # bool | Memory returned in MB. When set to `false` (default) memory will be returned in MiB.

        # Make request
        response = self.api.get_projects_0(
            cluster_id=cluster_id,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/v1/k8s/clusters/{clusterId}/projects" in kwargs["url"]

        # Verify query parameters
        assert "excludePermissions=" in kwargs["url"]
        # Verify query parameters
        assert "memoryUnitMb=" in kwargs["url"]

        # Verify response
        assert isinstance(response, List[Project2])

    def test_get_projects_0_error(self):
        """Test error handling for get_projects_0"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        cluster_id = "9f55255e-11ed-47c7-acef-fc4054768dbc"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.get_projects_0(
                cluster_id=cluster_id,
            )
        assert exc_info.value.status == 400

    def test_get_projects_metrics(self):
        """Test case for get_projects_metrics

        Get metrics data for all projects. Retrieves data from the metrics database. \\n Use in reporting and analysis tools. \\n Use a time range to return historical data (optional). If you use a &#x60;start&#x60; date, an &#x60;end&#x60; date is required.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        cluster_uuid = "9f55255e-11ed-47c7-acef-fc4054768dbc"  # str | The Universally Unique Identifier (UUID) of the cluster.
        start = "2013-10-20T19:20:30+01:00"  # datetime | Start of time range to fetch data from in UTC format.
        end = "2013-10-20T19:20:30+01:00"  # datetime | End of time range to fetch data from in UTC format.
        number_of_samples = (
            20  # int | The number of samples to take in the specified time range.
        )
        nodepool_name = "default"  # str | Filter by unique nodepool name.

        # Make request
        response = self.api.get_projects_metrics(
            cluster_uuid=cluster_uuid,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/v1/k8s/clusters/{clusterUuid}/projects/metrics" in kwargs["url"]

        # Verify query parameters
        assert "start=" in kwargs["url"]
        # Verify query parameters
        assert "end=" in kwargs["url"]
        # Verify query parameters
        assert "numberOfSamples=" in kwargs["url"]
        # Verify query parameters
        assert "nodepoolName=" in kwargs["url"]

        # Verify response
        assert isinstance(response, Projects)

    def test_get_projects_metrics_error(self):
        """Test error handling for get_projects_metrics"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        cluster_uuid = "9f55255e-11ed-47c7-acef-fc4054768dbc"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.get_projects_metrics(
                cluster_uuid=cluster_uuid,
            )
        assert exc_info.value.status == 400

    def test_patch_project_resources(self):
        """Test case for patch_project_resources

        Patch project resources Partial updates to specific items in the list. Should be used for update one or more attributes of an item without modifying the entire resource.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        project_id = "575c19e8-c7c3-45b0-8290-2f47397a8383"  # str | The project id
        resources = [runai.Resources()]  # List[Resources] | Project resources to patch.

        # Make request
        response = self.api.patch_project_resources(
            project_id=project_id,
            resources=resources,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "PATCH"
        assert "/api/v1/org-unit/projects/{projectId}/resources" in kwargs["url"]

        # Verify body
        assert kwargs["body"] is not None

        # Verify response
        assert isinstance(response, List[Resources])

    def test_patch_project_resources_error(self):
        """Test error handling for patch_project_resources"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        project_id = "575c19e8-c7c3-45b0-8290-2f47397a8383"
        resources = [runai.Resources()]

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.patch_project_resources(
                project_id=project_id,
                resources=resources,
            )
        assert exc_info.value.status == 400

    def test_update_project(self):
        """Test case for update_project

        Update project Get projects telemetry data by the given query parameters
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        project_id = "575c19e8-c7c3-45b0-8290-2f47397a8383"  # str | The project id
        project_update_request = (
            runai.ProjectUpdateRequest()
        )  # ProjectUpdateRequest | Project to update.

        # Make request
        response = self.api.update_project(
            project_id=project_id,
            project_update_request=project_update_request,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "PUT"
        assert "/api/v1/org-unit/projects/{projectId}" in kwargs["url"]

        # Verify body
        assert kwargs["body"] is not None

        # Verify response
        assert isinstance(response, Project)

    def test_update_project_error(self):
        """Test error handling for update_project"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        project_id = "575c19e8-c7c3-45b0-8290-2f47397a8383"
        project_update_request = runai.ProjectUpdateRequest()

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.update_project(
                project_id=project_id,
                project_update_request=project_update_request,
            )
        assert exc_info.value.status == 400

    def test_update_project_0(self):
        """Test case for update_project_0

        Update a project. Updates a project&#39;s details in a specific cluster. For example, node pool resources, and others. Deprecated - use &#x60;/api/v1/org-unit/projects/{projectId}&#x60; instead.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        id = "id_example"  # str | The unique project-id.
        cluster_id = "9f55255e-11ed-47c7-acef-fc4054768dbc"  # str | The Universally Unique Identifier (UUID) of the cluster.
        project_update_request1 = (
            runai.ProjectUpdateRequest1()
        )  # ProjectUpdateRequest1 |
        exclude_permissions = true  # bool | Backward compatibility of the `permissions` field. If `true`, the `permissions` field in the returned projects is not set. If `false`, the `permissions` field is set in the returned projects.

        # Make request
        response = self.api.update_project_0(
            id=id,
            cluster_id=cluster_id,
            project_update_request1=project_update_request1,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "PUT"
        assert "/v1/k8s/clusters/{clusterId}/projects/{id}" in kwargs["url"]

        # Verify query parameters
        assert "excludePermissions=" in kwargs["url"]

        # Verify body
        assert kwargs["body"] is not None

        # Verify response
        assert isinstance(response, Project2)

    def test_update_project_0_error(self):
        """Test error handling for update_project_0"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        id = "id_example"
        cluster_id = "9f55255e-11ed-47c7-acef-fc4054768dbc"
        project_update_request1 = runai.ProjectUpdateRequest1()

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.update_project_0(
                id=id,
                cluster_id=cluster_id,
                project_update_request1=project_update_request1,
            )
        assert exc_info.value.status == 400

    def test_update_project_resources(self):
        """Test case for update_project_resources

        Update project resources Update projects resources
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        project_id = "575c19e8-c7c3-45b0-8290-2f47397a8383"  # str | The project id
        resources = [
            runai.Resources()
        ]  # List[Resources] | Project resources to update.

        # Make request
        response = self.api.update_project_resources(
            project_id=project_id,
            resources=resources,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "PUT"
        assert "/api/v1/org-unit/projects/{projectId}/resources" in kwargs["url"]

        # Verify body
        assert kwargs["body"] is not None

        # Verify response
        assert isinstance(response, List[Resources])

    def test_update_project_resources_error(self):
        """Test error handling for update_project_resources"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        project_id = "575c19e8-c7c3-45b0-8290-2f47397a8383"
        resources = [runai.Resources()]

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.update_project_resources(
                project_id=project_id,
                resources=resources,
            )
        assert exc_info.value.status == 400
