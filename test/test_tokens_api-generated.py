# coding: utf-8

"""
Test file for TokensApi
Generated by OpenAPI Generator with custom template
"""

import pytest
import unittest.mock as mock
from datetime import datetime, timezone
import json

from runai.configuration import Configuration
from runai.api_client import ApiClient
from runai.models import *
from runai.exceptions import ApiException


class TestTokensApi:
    """Test cases for TokensApi"""

    @pytest.fixture(autouse=True)
    def setup(self):
        """Setup test fixtures"""
        self.configuration = Configuration(
            client_id="test-client",
            client_secret="test-secret",
            runai_base_url="https://test.run.ai",
        )
        self.api_client = ApiClient(self.configuration)
        self.api = TokensApi(self.api_client)

        # Mock the request method
        self.request_patcher = mock.patch.object(self.api_client.rest_client, "request")
        self.mock_request = self.request_patcher.start()
        yield
        self.request_patcher.stop()

    def test_app_token(self):
        """Test case for app_token

        get application token Retrieve access token for an application. The application token is retrieved from the authorization server.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        app_token_request = runai.AppTokenRequest()  # AppTokenRequest |

        # Make request
        response = self.api.app_token()

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "POST"
        assert "/v1/k8s/auth/oauth/apptoken" in kwargs["url"]

        # Verify body
        assert kwargs["body"] is not None

        # Verify response
        assert isinstance(response, AppTokenResponse)

    def test_app_token_error(self):
        """Test error handling for app_token"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.app_token()
        assert exc_info.value.status == 400

    def test_exchange_code_for_token(self):
        """Test case for exchange_code_for_token

        exchange code for token Exchanges an authorization code for an access token. The authorization code is retrieved from the authorization server.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        redirect_uri = "redirect_uri_example"  # str | The redirect uri to redirect to after the authorization server completes the authorization flow
        code = "code_example"  # str | The exchange code retrieved from the idp server

        # Make request
        response = self.api.exchange_code_for_token(
            redirect_uri=redirect_uri,
            code=code,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/v1/k8s/auth/token/exchange" in kwargs["url"]

        # Verify query parameters
        assert "redirect_uri=" in kwargs["url"]
        # Verify query parameters
        assert "code=" in kwargs["url"]

        # Verify response
        assert isinstance(response, TokenResponse)

    def test_exchange_code_for_token_error(self):
        """Test error handling for exchange_code_for_token"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        redirect_uri = "redirect_uri_example"
        code = "code_example"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.exchange_code_for_token(
                redirect_uri=redirect_uri,
                code=code,
            )
        assert exc_info.value.status == 400

    def test_grant_token(self):
        """Test case for grant_token

        Create an application token. Use to create application tokens. Select a token using the &#x60;grant_type&#x60; parameter.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        user_agent = "user_agent_example"  # str |
        token_request = runai.TokenRequest()  # TokenRequest |

        # Make request
        response = self.api.grant_token()

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "POST"
        assert "/api/v1/token" in kwargs["url"]

        # Verify headers
        assert kwargs["headers"]["User-Agent"] is not None

        # Verify body
        assert kwargs["body"] is not None

        # Verify response
        assert isinstance(response, TokenResponse)

    def test_grant_token_error(self):
        """Test error handling for grant_token"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.grant_token()
        assert exc_info.value.status == 400

    def test_refresh_token(self):
        """Test case for refresh_token

        refresh token Refreshes an user tokens. The refresh token is retrieved from the authorization server.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        refresh_token = "refresh_token_example"  # str | The refresh token retrieved from the idp server

        # Make request
        response = self.api.refresh_token(
            refresh_token=refresh_token,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "POST"
        assert "/v1/k8s/auth/oauth/tokens/refresh" in kwargs["url"]

        # Verify query parameters
        assert "refresh_token=" in kwargs["url"]

        # Verify response
        assert isinstance(response, TokenResponse)

    def test_refresh_token_error(self):
        """Test error handling for refresh_token"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        refresh_token = "refresh_token_example"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.refresh_token(
                refresh_token=refresh_token,
            )
        assert exc_info.value.status == 400
