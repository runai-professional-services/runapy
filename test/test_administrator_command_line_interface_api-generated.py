# coding: utf-8

"""
Test file for AdministratorCommandLineInterfaceApi
Generated by OpenAPI Generator with custom template
"""

import pytest
import unittest.mock as mock
from datetime import datetime, timezone
import json

from runai.configuration import Configuration
from runai.api_client import ApiClient
from runai.models import *
from runai.exceptions import ApiException


class TestAdministratorCommandLineInterfaceApi:
    """Test cases for AdministratorCommandLineInterfaceApi"""

    @pytest.fixture(autouse=True)
    def setup(self):
        """Setup test fixtures"""
        self.configuration = Configuration(
            client_id="test-client",
            client_secret="test-secret",
            runai_base_url="https://test.run.ai",
        )
        self.api_client = ApiClient(self.configuration)
        self.api = AdministratorCommandLineInterfaceApi(self.api_client)

        # Mock the request method
        self.request_patcher = mock.patch.object(self.api_client.rest_client, "request")
        self.mock_request = self.request_patcher.start()
        yield
        self.request_patcher.stop()

    def test_get_admin_cli_release(self):
        """Test case for get_admin_cli_release

        Get Administrator Command Line Interface release. Retrieve the Administrator Command Line Interface version.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        os = "os_example"  # str | The operating system

        # Make request
        response = self.api.get_admin_cli_release(
            os=os,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/v1/k8s/admin-cli/{os}" in kwargs["url"]

        # Verify response
        assert isinstance(response, bytearray)

    def test_get_admin_cli_release_error(self):
        """Test error handling for get_admin_cli_release"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        os = "os_example"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.get_admin_cli_release(
                os=os,
            )
        assert exc_info.value.status == 400

    def test_get_admin_cli_release_by_version(self):
        """Test case for get_admin_cli_release_by_version

        Get Administrator Command Line Interface release by version. Retrieve the Administrator Command Line Interface release by version.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        os = "os_example"  # str | The operating system
        version = "version_example"  # str | run:ai version (semantic version)

        # Make request
        response = self.api.get_admin_cli_release_by_version(
            os=os,
            version=version,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/v1/k8s/admin-cli/{version}/{os}" in kwargs["url"]

        # Verify response
        assert isinstance(response, bytearray)

    def test_get_admin_cli_release_by_version_error(self):
        """Test error handling for get_admin_cli_release_by_version"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        os = "os_example"
        version = "version_example"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.get_admin_cli_release_by_version(
                os=os,
                version=version,
            )
        assert exc_info.value.status == 400

    def test_get_admin_cli_release_by_version_checksum(self):
        """Test case for get_admin_cli_release_by_version_checksum

        Get Administrator Command Line Interface release checksums. Retrieve the checksums of the Administrator Command Line Interface release.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        os = "os_example"  # str | The operating system
        version = "version_example"  # str | run:ai version (semantic version)

        # Make request
        response = self.api.get_admin_cli_release_by_version_checksum(
            os=os,
            version=version,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/v1/k8s/admin-cli/{version}/{os}/checksum" in kwargs["url"]

        # Verify response
        assert isinstance(response, ChecksumResponse)

    def test_get_admin_cli_release_by_version_checksum_error(self):
        """Test error handling for get_admin_cli_release_by_version_checksum"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        os = "os_example"
        version = "version_example"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.get_admin_cli_release_by_version_checksum(
                os=os,
                version=version,
            )
        assert exc_info.value.status == 400

    def test_get_admin_cli_release_checksum(self):
        """Test case for get_admin_cli_release_checksum

        Get Administrator Command Line Interface release details. Retrieve the details of the Administrator Command Line Interface release.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        os = "os_example"  # str | The operating system

        # Make request
        response = self.api.get_admin_cli_release_checksum(
            os=os,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/v1/k8s/admin-cli/{os}/checksum" in kwargs["url"]

        # Verify response
        assert isinstance(response, ChecksumResponse)

    def test_get_admin_cli_release_checksum_error(self):
        """Test error handling for get_admin_cli_release_checksum"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        os = "os_example"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.get_admin_cli_release_checksum(
                os=os,
            )
        assert exc_info.value.status == 400
