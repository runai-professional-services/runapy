# coding: utf-8

"""
    Runai API

    # Introduction  The Run:AI Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://docs.run.ai/latest/developer/rest-auth/#request-an-api-token). 

    The version of the OpenAPI document: 2.18
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

import runai
from runai.models.get_projects200_response_projects_inner import (
    GetProjects200ResponseProjectsInner,
)


class TestGetProjects200ResponseProjectsInner(unittest.TestCase):
    """GetProjects200ResponseProjectsInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetProjects200ResponseProjectsInner:
        """Test GetProjects200ResponseProjectsInner
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `GetProjects200ResponseProjectsInner`

        # model = GetProjects200ResponseProjectsInner()
        if include_optional:
            return GetProjects200ResponseProjectsInner(
                scheduling_rules=runai.models.data_updatable_fields_scheduling_rules.DataUpdatableFields_schedulingRules(
                    interactive_job_time_limit_seconds=100,
                    interactive_job_max_idle_duration_seconds=100,
                    interactive_job_preempt_idle_duration_seconds=100,
                    training_job_max_idle_duration_seconds=100,
                    training_job_time_limit_seconds=100,
                ),
                default_node_pools=[""],
                node_types=runai.models.node_types_per_workload.NodeTypesPerWorkload(
                    training=[""],
                    workspace=[""],
                ),
                resources=[
                    runai.models.resources.Resources(
                        node_pool=runai.models.resources_node_pool.Resources_nodePool(
                            id="22",
                            name="default",
                        ),
                        gpu=None,
                        cpu=runai.models.resources_cpu.Resources_cpu(),
                        memory=runai.models.resources_memory.Resources_memory(),
                    )
                ],
                name="organization1",
                cluster_id="71f69d83-ba66-4822-adf5-55ce55efd210",
                id="33",
                parent_id="53a9228e-a722-420d-a102-9dc90da2efca",
                requested_namespace="runai-proj1",
                status=runai.models.project_status.ProjectStatus(
                    namespace="runai-proj1",
                    phase="Ready",
                    phase_message="Project is ready",
                    node_pool_quota_statuses=[null],
                    quota_status=runai.models.quota_status.QuotaStatus(
                        allocated=runai.models.quota_status_resource.QuotaStatusResource(
                            gpu=0,
                            cpu=1000,
                            memory=1000,
                        ),
                        allocated_non_preemptible=runai.models.quota_status_resource.QuotaStatusResource(
                            gpu=0,
                            cpu=1000,
                            memory=1000,
                        ),
                        requested=None,
                    ),
                    additional_status_data={},
                ),
                created_at=datetime.datetime.strptime(
                    "2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f"
                ),
                updated_at=datetime.datetime.strptime(
                    "2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f"
                ),
                created_by="",
                updated_by="",
                parent=runai.models.department_project_parent.DepartmentProjectParent(
                    id="9f55253e-11ed-47c7-acef-fc4054768dbc",
                    name="organization1",
                    parent=runai.models.department_project_parent.DepartmentProjectParent(
                        id="9f55253e-11ed-47c7-acef-fc4054768dbc",
                        name="organization1",
                    ),
                ),
            )
        else:
            return GetProjects200ResponseProjectsInner(
                name="organization1",
                id="33",
                status=runai.models.project_status.ProjectStatus(
                    namespace="runai-proj1",
                    phase="Ready",
                    phase_message="Project is ready",
                    node_pool_quota_statuses=[null],
                    quota_status=runai.models.quota_status.QuotaStatus(
                        allocated=runai.models.quota_status_resource.QuotaStatusResource(
                            gpu=0,
                            cpu=1000,
                            memory=1000,
                        ),
                        allocated_non_preemptible=runai.models.quota_status_resource.QuotaStatusResource(
                            gpu=0,
                            cpu=1000,
                            memory=1000,
                        ),
                        requested=None,
                    ),
                    additional_status_data={},
                ),
                created_at=datetime.datetime.strptime(
                    "2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f"
                ),
                updated_at=datetime.datetime.strptime(
                    "2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f"
                ),
            )

    def testGetProjects200ResponseProjectsInner(self):
        """Test GetProjects200ResponseProjectsInner"""
        inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()
