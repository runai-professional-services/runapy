# coding: utf-8

"""
    Test file for TenantApi
    Generated by OpenAPI Generator with custom template
"""

import pytest
import unittest.mock as mock
from datetime import datetime, timezone
import json

from runai.configuration import Configuration
from runai.api_client import ApiClient
from runai.models import *
from runai.exceptions import ApiException


class TestTenantApi:
    """Test cases for TenantApi"""

    @pytest.fixture(autouse=True)
    def setup(self):
        """Setup test fixtures"""
        self.configuration = Configuration(
            client_id="test-client",
            client_secret="test-secret",
            runai_base_url="https://test.run.ai",
        )
        self.api_client = ApiClient(self.configuration)
        self.api = TenantApi(self.api_client)

        # Mock the request method
        self.request_patcher = mock.patch.object(self.api_client.rest_client, "request")
        self.mock_request = self.request_patcher.start()
        yield
        self.request_patcher.stop()

    def test_get_tenant_settings(self):
        """Test case for get_tenant_settings

        Get all tenant settings. Retrieve all tenant settings.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters

        # Make request
        response = self.api.get_tenant_settings()

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/v1/k8s/setting" in kwargs["url"]

        # Verify response
        assert isinstance(response, List[Setting])

    def test_get_tenant_settings_error(self):
        """Test error handling for get_tenant_settings"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.get_tenant_settings()
        assert exc_info.value.status == 400

    def test_get_tenant_settings_by_key(self):
        """Test case for get_tenant_settings_by_key

        Get a tenant setting by key. Retrieve a specific tenant setting by key.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        setting_key = "setting_key_example"  # str |

        # Make request
        response = self.api.get_tenant_settings_by_key(
            setting_key=setting_key,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/v1/k8s/setting/{settingKey}" in kwargs["url"]

        # Verify response
        assert isinstance(response, bool)

    def test_get_tenant_settings_by_key_error(self):
        """Test error handling for get_tenant_settings_by_key"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        setting_key = "setting_key_example"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.get_tenant_settings_by_key(
                setting_key=setting_key,
            )
        assert exc_info.value.status == 400

    def test_logo(self):
        """Test case for logo

        Get tenant logo. Get tennant logo
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        tenant_id = 56  # int |

        # Make request
        response = self.api.logo(
            tenant_id=tenant_id,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/v1/k8s/tenant/{tenantId}/logo" in kwargs["url"]

        # Verify response
        assert isinstance(response, Logo200Response)

    def test_logo_error(self):
        """Test error handling for logo"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        tenant_id = 56

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.logo(
                tenant_id=tenant_id,
            )
        assert exc_info.value.status == 400

    def test_update_tenant_setting(self):
        """Test case for update_tenant_setting

        Update a tenant setting. Use to update tenant settings.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        tenant_setting_creation_request = (
            runai.TenantSettingCreationRequest()
        )  # TenantSettingCreationRequest |

        # Make request
        response = self.api.update_tenant_setting()

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "PUT"
        assert "/v1/k8s/setting" in kwargs["url"]

        # Verify body
        assert kwargs["body"] is not None

        # Verify response
        assert isinstance(response, TenantSettingCreationResponse)

    def test_update_tenant_setting_error(self):
        """Test error handling for update_tenant_setting"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.update_tenant_setting()
        assert exc_info.value.status == 400

    def test_upload_tenant_logo(self):
        """Test case for upload_tenant_logo

        Upload a tenant logo. Upload tenant logo file. Max size of 128kb.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({})
        self.mock_request.return_value = mock_response

        # Test parameters
        tenant_id = 56  # int |
        logo200_response = runai.Logo200Response()  # Logo200Response |

        # Make request
        self.api.upload_tenant_logo(
            tenant_id=tenant_id,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "POST"
        assert "/v1/k8s/tenant/{tenantId}/logo" in kwargs["url"]

        # Verify body
        assert kwargs["body"] is not None

    def test_upload_tenant_logo_error(self):
        """Test error handling for upload_tenant_logo"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        tenant_id = 56

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.upload_tenant_logo(
                tenant_id=tenant_id,
            )
        assert exc_info.value.status == 400
