# coding: utf-8

"""
    Test file for PodsApi
    Generated by OpenAPI Generator with custom template
"""

import pytest
import unittest.mock as mock
from datetime import datetime, timezone
import json

from runai.configuration import Configuration
from runai.api_client import ApiClient
from runai.models import *
from runai.exceptions import ApiException


class TestPodsApi:
    """Test cases for PodsApi"""

    @pytest.fixture(autouse=True)
    def setup(self):
        """Setup test fixtures"""
        self.configuration = Configuration(
            client_id="test-client",
            client_secret="test-secret",
            runai_base_url="https://test.run.ai",
        )
        self.api_client = ApiClient(self.configuration)
        self.api = PodsApi(self.api_client)
        
        # Mock the request method
        self.request_patcher = mock.patch.object(
            self.api_client.rest_client, "request"
        )
        self.mock_request = self.request_patcher.start()
        yield
        self.request_patcher.stop()

    def test_count_pods(self):
        """Test case for count_pods

        Get pods count. Retrieve the number of pods from a cluster.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({
            "data": {}
        })
        self.mock_request.return_value = mock_response

        # Test parameters
        deleted = True   # bool | Return only deleted resources when `true`.
        filter_by = ['[\"nodeName!=some-node-name\"]']   # List[str] | Filter results using a parameter. Use the format field-name operator value. Operators are `==` Equals, `!=` Not equals, `<=` Less than or equal, `>=` Greater than or equal, `=@` contains, `!@` Does not contains, `=^` Starts with and `=$` Ends with. Dates are in ISO 8601 timestamp format and available for operators `==`, `!=`, `<=` and `>=`.
        search = 'test project'   # str | Filter results by a free text search.

        # Make request
        response = self.api.count_pods(
            
            
            
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/api/v1/workloads/pods/count" in kwargs["url"]

        # Verify query parameters
        assert "deleted=" in kwargs["url"]
        # Verify query parameters
        assert "filterBy=" in kwargs["url"]
        # Verify query parameters
        assert "search=" in kwargs["url"]



        # Verify response
        assert isinstance(response, CountAccessRules200Response)

    def test_count_pods_error(self):
        """Test error handling for count_pods"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.count_pods(
                
                
                
            )
        assert exc_info.value.status == 400

    def test_get_pods(self):
        """Test case for get_pods

        get all pods from a specific cluster. Deprecated - please use api/v1/workloads/pods instead 
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({
            "data": {}
        })
        self.mock_request.return_value = mock_response

        # Test parameters
        uuid = 'uuid_example'   # str | Unique identifier of the cluster

        # Make request
        response = self.api.get_pods(
            uuid=uuid,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/v1/k8s/clusters/{uuid}/pods" in kwargs["url"]




        # Verify response
        assert isinstance(response, List[Pod])

    def test_get_pods_error(self):
        """Test error handling for get_pods"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        uuid = 'uuid_example' 

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.get_pods(
                uuid=uuid,
            )
        assert exc_info.value.status == 400

    def test_get_workload_pod_metrics(self):
        """Test case for get_workload_pod_metrics

        Get pod metrics data. Retrieve pod&#39;s metrics data for use in analysis applications.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({
            "data": {}
        })
        self.mock_request.return_value = mock_response

        # Test parameters
        workload_id = 'workload_id_example'   # str | The  Universally Unique Identifier (UUID) of the workload.
        pod_id = 'pod_id_example'   # str | The requested pod id.
        metric_type = [runai.PodMetricType()]   # List[PodMetricType] | Specify which metric data to request. Advanced GPU metrics are only supported if the 'Advanced GPU Metrics' feature flag in the settings is enabled.
        start = '2023-06-06T12:09:18.211Z'   # datetime | Start date of time range to fetch data in ISO 8601 timestamp format.
        end = '2023-06-07T12:09:18.211Z'   # datetime | End date of time range to fetch data in ISO 8601 timestamp format.
        number_of_samples = 20   # int | The number of samples to take in the specified time range.

        # Make request
        response = self.api.get_workload_pod_metrics(
            workload_id=workload_id,
            pod_id=pod_id,
            metric_type=metric_type,
            start=start,
            end=end,
            
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/api/v1/workloads/{workloadId}/pods/{podId}/metrics" in kwargs["url"]

        # Verify query parameters
        assert "metricType=" in kwargs["url"]
        # Verify query parameters
        assert "start=" in kwargs["url"]
        # Verify query parameters
        assert "end=" in kwargs["url"]
        # Verify query parameters
        assert "numberOfSamples=" in kwargs["url"]



        # Verify response
        assert isinstance(response, MetricsResponse)

    def test_get_workload_pod_metrics_error(self):
        """Test error handling for get_workload_pod_metrics"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        workload_id = 'workload_id_example' 
        pod_id = 'pod_id_example' 
        metric_type = [runai.PodMetricType()] 
        start = '2023-06-06T12:09:18.211Z' 
        end = '2023-06-07T12:09:18.211Z' 

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.get_workload_pod_metrics(
                workload_id=workload_id,
                pod_id=pod_id,
                metric_type=metric_type,
                start=start,
                end=end,
                
            )
        assert exc_info.value.status == 400

    def test_get_workload_pods(self):
        """Test case for get_workload_pods

        Get workload pods by id. Retrieve the details of workload pods by workload id.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({
            "data": {}
        })
        self.mock_request.return_value = mock_response

        # Test parameters
        workload_id = 'workload_id_example'   # str | The  Universally Unique Identifier (UUID) of the workload.
        deleted = True   # bool | Return only deleted resources when `true`.
        offset = 100   # int | The offset of the first item returned in the collection.
        limit = 50   # int | The maximum number of entries to return.
        search = 'test project'   # str | Filter results by a free text search.

        # Make request
        response = self.api.get_workload_pods(
            workload_id=workload_id,
            
            
            
            
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/api/v1/workloads/{workloadId}/pods" in kwargs["url"]

        # Verify query parameters
        assert "deleted=" in kwargs["url"]
        # Verify query parameters
        assert "offset=" in kwargs["url"]
        # Verify query parameters
        assert "limit=" in kwargs["url"]
        # Verify query parameters
        assert "search=" in kwargs["url"]



        # Verify response
        assert isinstance(response, ListPods200Response)

    def test_get_workload_pods_error(self):
        """Test error handling for get_workload_pods"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        workload_id = 'workload_id_example' 

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.get_workload_pods(
                workload_id=workload_id,
                
                
                
                
            )
        assert exc_info.value.status == 400

    def test_list_pods(self):
        """Test case for list_pods

        List pods. Retrieve a list of pods from a cluster.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({
            "data": {}
        })
        self.mock_request.return_value = mock_response

        # Test parameters
        deleted = True   # bool | Return only deleted resources when `true`.
        offset = 100   # int | The offset of the first item returned in the collection.
        limit = 50   # int | The maximum number of entries to return.
        sort_order = asc   # str | Sort results in descending or ascending order.
        sort_by = 'sort_by_example'   # str | Sort results using a parameter.
        filter_by = ['[\"nodeName!=some-node-name\"]']   # List[str] | Filter results using a parameter. Use the format field-name operator value. Operators are `==` Equals, `!=` Not equals, `<=` Less than or equal, `>=` Greater than or equal, `=@` contains, `!@` Does not contains, `=^` Starts with and `=$` Ends with. Dates are in ISO 8601 timestamp format and available for operators `==`, `!=`, `<=` and `>=`.
        verbosity = brief   # PodVerbosity | response verbosity level. if full, the response includes workloadName and projectName fields. 
        completed = "all\'   # str | Return only completed resources when \'true", return only non-completed resources when 'false'. By default, or when empty, returns all resources.
        search = 'test project'   # str | Filter results by a free text search.

        # Make request
        response = self.api.list_pods(
            
            
            
            
            
            
            
            
            
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/api/v1/workloads/pods" in kwargs["url"]

        # Verify query parameters
        assert "deleted=" in kwargs["url"]
        # Verify query parameters
        assert "offset=" in kwargs["url"]
        # Verify query parameters
        assert "limit=" in kwargs["url"]
        # Verify query parameters
        assert "sortOrder=" in kwargs["url"]
        # Verify query parameters
        assert "sortBy=" in kwargs["url"]
        # Verify query parameters
        assert "filterBy=" in kwargs["url"]
        # Verify query parameters
        assert "verbosity=" in kwargs["url"]
        # Verify query parameters
        assert "completed=" in kwargs["url"]
        # Verify query parameters
        assert "search=" in kwargs["url"]



        # Verify response
        assert isinstance(response, ListPods200Response)

    def test_list_pods_error(self):
        """Test error handling for list_pods"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.list_pods(
                
                
                
                
                
                
                
                
                
            )
        assert exc_info.value.status == 400
