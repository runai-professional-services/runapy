# coding: utf-8

"""
Test file for IdpsApi
Generated by OpenAPI Generator with custom template
"""

import pytest
import unittest.mock as mock
from datetime import datetime, timezone
import json

from runai.configuration import Configuration
from runai.api_client import ApiClient
from runai.models import *
from runai.exceptions import ApiException


class TestIdpsApi:
    """Test cases for IdpsApi"""

    @pytest.fixture(autouse=True)
    def setup(self):
        """Setup test fixtures"""
        self.configuration = Configuration(
            client_id="test-client",
            client_secret="test-secret",
            runai_base_url="https://test.run.ai",
        )
        self.api_client = ApiClient(self.configuration)
        self.api = IdpsApi(self.api_client)

        # Mock the request method
        self.request_patcher = mock.patch.object(self.api_client.rest_client, "request")
        self.mock_request = self.request_patcher.start()
        yield
        self.request_patcher.stop()

    def test_create_idp(self):
        """Test case for create_idp

        Configure external idp
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        idp_creation_request = {
            "type": "saml",
            "samlData": {
                "metadataXmlType": "url",
                "metadataXmlUrl": "https://authhost/saml/metadata.xml",
            },
            "mappers": {
                "gid": "GID",
                "groups": "GROUPS",
                "supplementaryGroups": "SUPPLEMENTARYGROUPS",
                "uid": "UID",
                "email": "email",
            },
        }  # IdpCreationRequest | Idp configuration

        # Make request
        response = self.api.create_idp(
            idp_creation_request=idp_creation_request,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "POST"
        assert "/api/v1/idps" in kwargs["url"]

        # Verify body
        assert kwargs["body"] is not None

        # Verify response
        assert isinstance(response, IdpPostResponse)

    def test_create_idp_error(self):
        """Test error handling for create_idp"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        idp_creation_request = {
            "type": "saml",
            "samlData": {
                "metadataXmlType": "url",
                "metadataXmlUrl": "https://authhost/saml/metadata.xml",
            },
            "mappers": {
                "gid": "GID",
                "groups": "GROUPS",
                "supplementaryGroups": "SUPPLEMENTARYGROUPS",
                "uid": "UID",
                "email": "email",
            },
        }

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.create_idp(
                idp_creation_request=idp_creation_request,
            )
        assert exc_info.value.status == 400

    def test_delete_idp(self):
        """Test case for delete_idp

        Delete external idp by alias
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({})
        self.mock_request.return_value = mock_response

        # Test parameters
        idp = "idp_example"  # str | The alias of the idp

        # Make request
        self.api.delete_idp(
            idp=idp,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "DELETE"
        assert "/api/v1/idps/{idp}" in kwargs["url"]

    def test_delete_idp_error(self):
        """Test error handling for delete_idp"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        idp = "idp_example"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.delete_idp(
                idp=idp,
            )
        assert exc_info.value.status == 400

    def test_get_idp(self):
        """Test case for get_idp

        Get external idp by alias
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        idp = "idp_example"  # str | The alias of the idp

        # Make request
        response = self.api.get_idp(
            idp=idp,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/api/v1/idps/{idp}" in kwargs["url"]

        # Verify response
        assert isinstance(response, Idp1)

    def test_get_idp_error(self):
        """Test error handling for get_idp"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        idp = "idp_example"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.get_idp(
                idp=idp,
            )
        assert exc_info.value.status == 400

    def test_get_idp_mappers(self):
        """Test case for get_idp_mappers

        Get idp mappers
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        idp = "idp_example"  # str | The alias of the idp

        # Make request
        response = self.api.get_idp_mappers(
            idp=idp,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/api/v1/idps/{idp}/mappers" in kwargs["url"]

        # Verify response
        assert isinstance(response, Mappers)

    def test_get_idp_mappers_error(self):
        """Test error handling for get_idp_mappers"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        idp = "idp_example"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.get_idp_mappers(
                idp=idp,
            )
        assert exc_info.value.status == 400

    def test_get_idps(self):
        """Test case for get_idps

        Get external idps list
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters

        # Make request
        response = self.api.get_idps()

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/api/v1/idps" in kwargs["url"]

        # Verify response
        assert isinstance(response, List[Idp1])

    def test_get_idps_error(self):
        """Test error handling for get_idps"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.get_idps()
        assert exc_info.value.status == 400

    def test_update_idp(self):
        """Test case for update_idp

        Update external idp by alias
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({})
        self.mock_request.return_value = mock_response

        # Test parameters
        idp = "idp_example"  # str | The alias of the idp
        idp_creation_request = {
            "type": "saml",
            "samlData": {
                "metadataXmlType": "url",
                "metadataXmlUrl": "https://authhost/saml/metadata.xml",
            },
            "mappers": {
                "gid": "GID",
                "groups": "GROUPS",
                "supplementaryGroups": "SUPPLEMENTARYGROUPS",
                "uid": "UID",
                "email": "email",
            },
        }  # IdpCreationRequest | Updated idp object

        # Make request
        self.api.update_idp(
            idp=idp,
            idp_creation_request=idp_creation_request,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "PUT"
        assert "/api/v1/idps/{idp}" in kwargs["url"]

        # Verify body
        assert kwargs["body"] is not None

    def test_update_idp_error(self):
        """Test error handling for update_idp"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        idp = "idp_example"
        idp_creation_request = {
            "type": "saml",
            "samlData": {
                "metadataXmlType": "url",
                "metadataXmlUrl": "https://authhost/saml/metadata.xml",
            },
            "mappers": {
                "gid": "GID",
                "groups": "GROUPS",
                "supplementaryGroups": "SUPPLEMENTARYGROUPS",
                "uid": "UID",
                "email": "email",
            },
        }

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.update_idp(
                idp=idp,
                idp_creation_request=idp_creation_request,
            )
        assert exc_info.value.status == 400

    def test_update_idp_mappers(self):
        """Test case for update_idp_mappers

        Update idp mappers
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({})
        self.mock_request.return_value = mock_response

        # Test parameters
        idp = "idp_example"  # str | The alias of the idp
        mappers = (
            runai.Mappers()
        )  # Mappers | Map of our mappers and their source in the external idp

        # Make request
        self.api.update_idp_mappers(
            idp=idp,
            mappers=mappers,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "PUT"
        assert "/api/v1/idps/{idp}/mappers" in kwargs["url"]

        # Verify body
        assert kwargs["body"] is not None

    def test_update_idp_mappers_error(self):
        """Test error handling for update_idp_mappers"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        idp = "idp_example"
        mappers = runai.Mappers()

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.update_idp_mappers(
                idp=idp,
                mappers=mappers,
            )
        assert exc_info.value.status == 400
