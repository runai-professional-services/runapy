# coding: utf-8

"""
    Test file for TemplateApi
    Generated by OpenAPI Generator with custom template
"""

import pytest
import unittest.mock as mock
from datetime import datetime, timezone
import json

from runai.configuration import Configuration
from runai.api_client import ApiClient
from runai.models import *
from runai.exceptions import ApiException


class TestTemplateApi:
    """Test cases for TemplateApi"""

    @pytest.fixture(autouse=True)
    def setup(self):
        """Setup test fixtures"""
        self.configuration = Configuration(
            client_id="test-client",
            client_secret="test-secret",
            runai_base_url="https://test.run.ai",
        )
        self.api_client = ApiClient(self.configuration)
        self.api = TemplateApi(self.api_client)

        # Mock the request method
        self.request_patcher = mock.patch.object(self.api_client.rest_client, "request")
        self.mock_request = self.request_patcher.start()
        yield
        self.request_patcher.stop()

    def test_create_template(self):
        """Test case for create_template

        Create a template. Use to create a template.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        workload_template_creation_request = (
            runai.WorkloadTemplateCreationRequest()
        )  # WorkloadTemplateCreationRequest |

        # Make request
        response = self.api.create_template()

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "POST"
        assert "/api/v1/asset/workload-template" in kwargs["url"]

        # Verify body
        assert kwargs["body"] is not None

        # Verify response
        assert isinstance(response, WorkloadTemplate)

    def test_create_template_error(self):
        """Test error handling for create_template"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.create_template()
        assert exc_info.value.status == 400

    def test_delete_template_by_id(self):
        """Test case for delete_template_by_id

        Delete a template. Use to delete a template by id.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        asset_id = "asset_id_example"  # str | Unique identifier of the asset.

        # Make request
        response = self.api.delete_template_by_id(
            asset_id=asset_id,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "DELETE"
        assert "/api/v1/asset/workload-template/{AssetId}" in kwargs["url"]

        # Verify response
        assert isinstance(response, HttpResponse1)

    def test_delete_template_by_id_error(self):
        """Test error handling for delete_template_by_id"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        asset_id = "asset_id_example"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.delete_template_by_id(
                asset_id=asset_id,
            )
        assert exc_info.value.status == 400

    def test_get_template_by_id(self):
        """Test case for get_template_by_id

        Get a template. Retrieve the details of a template by id.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        asset_id = "asset_id_example"  # str | Unique identifier of the asset.

        # Make request
        response = self.api.get_template_by_id(
            asset_id=asset_id,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/api/v1/asset/workload-template/{AssetId}" in kwargs["url"]

        # Verify response
        assert isinstance(response, WorkloadTemplate)

    def test_get_template_by_id_error(self):
        """Test error handling for get_template_by_id"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        asset_id = "asset_id_example"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.get_template_by_id(
                asset_id=asset_id,
            )
        assert exc_info.value.status == 400

    def test_list_templates(self):
        """Test case for list_templates

        List templates. Retrieve a list of templates.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        name = "name_example"  # str | Filter results by name.
        scope = "scope_example"  # str | Filter results by scope.
        project_id = 56  # int | Filter results by project id. if scope filter is project, only assets from the specific project will be included in the response. otherwise, the response will include both project, department, cluster and tenant assets.
        department_id = "1"  # str | Filter using the department id.
        cluster_id = "d73a738f-fab3-430a-8fa3-5241493d7128"  # str | Filter using the Universally Unique Identifier (UUID) of the cluster.
        distributed_framework = "distributed_framework_example"  # str | Filter results to workload of type distributed and distributedFramework.
        is_distributed = True  # bool | Filter results to workload of type distributed.
        is_training = True  # bool | Filter results to workload of type training.
        is_workspace = True  # bool | Filter results to workload of type workspace.

        # Make request
        response = self.api.list_templates()

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/api/v1/asset/workload-template" in kwargs["url"]

        # Verify query parameters
        assert "name=" in kwargs["url"]
        # Verify query parameters
        assert "scope=" in kwargs["url"]
        # Verify query parameters
        assert "projectId=" in kwargs["url"]
        # Verify query parameters
        assert "departmentId=" in kwargs["url"]
        # Verify query parameters
        assert "clusterId=" in kwargs["url"]
        # Verify query parameters
        assert "distributedFramework=" in kwargs["url"]
        # Verify query parameters
        assert "isDistributed=" in kwargs["url"]
        # Verify query parameters
        assert "isTraining=" in kwargs["url"]
        # Verify query parameters
        assert "isWorkspace=" in kwargs["url"]

        # Verify response
        assert isinstance(response, WorkloadTemplateListResponse)

    def test_list_templates_error(self):
        """Test error handling for list_templates"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.list_templates()
        assert exc_info.value.status == 400

    def test_update_template(self):
        """Test case for update_template

        Update a template. Use to update the details of a template by id.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        asset_id = "asset_id_example"  # str | Unique identifier of the asset.
        workload_template_update_request = (
            runai.WorkloadTemplateUpdateRequest()
        )  # WorkloadTemplateUpdateRequest |

        # Make request
        response = self.api.update_template(
            asset_id=asset_id,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "PUT"
        assert "/api/v1/asset/workload-template/{AssetId}" in kwargs["url"]

        # Verify body
        assert kwargs["body"] is not None

        # Verify response
        assert isinstance(response, WorkloadTemplate)

    def test_update_template_error(self):
        """Test error handling for update_template"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        asset_id = "asset_id_example"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.update_template(
                asset_id=asset_id,
            )
        assert exc_info.value.status == 400
