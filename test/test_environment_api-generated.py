# coding: utf-8

"""
    Test file for EnvironmentApi
    Generated by OpenAPI Generator with custom template
"""

import pytest
import unittest.mock as mock
from datetime import datetime, timezone
import json

from runai.configuration import Configuration
from runai.api_client import ApiClient
from runai.models import *
from runai.exceptions import ApiException


class TestEnvironmentApi:
    """Test cases for EnvironmentApi"""

    @pytest.fixture(autouse=True)
    def setup(self):
        """Setup test fixtures"""
        self.configuration = Configuration(
            client_id="test-client",
            client_secret="test-secret",
            runai_base_url="https://test.run.ai",
        )
        self.api_client = ApiClient(self.configuration)
        self.api = EnvironmentApi(self.api_client)

        # Mock the request method
        self.request_patcher = mock.patch.object(self.api_client.rest_client, "request")
        self.mock_request = self.request_patcher.start()
        yield
        self.request_patcher.stop()

    def test_create_environment_asset(self):
        """Test case for create_environment_asset

        Create an environment asset. Use to create an environment asset.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        environment_creation_request = (
            runai.EnvironmentCreationRequest()
        )  # EnvironmentCreationRequest |

        # Make request
        response = self.api.create_environment_asset()

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "POST"
        assert "/api/v1/asset/environment" in kwargs["url"]

        # Verify body
        assert kwargs["body"] is not None

        # Verify response
        assert isinstance(response, EnvironmentAsset)

    def test_create_environment_asset_error(self):
        """Test error handling for create_environment_asset"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.create_environment_asset()
        assert exc_info.value.status == 400

    def test_delete_environment_asset_by_id(self):
        """Test case for delete_environment_asset_by_id

        Delete an environment asset. Use to delete an environment asset by id.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        asset_id = "asset_id_example"  # str | Unique identifier of the asset.

        # Make request
        response = self.api.delete_environment_asset_by_id(
            asset_id=asset_id,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "DELETE"
        assert "/api/v1/asset/environment/{AssetId}" in kwargs["url"]

        # Verify response
        assert isinstance(response, HttpResponse1)

    def test_delete_environment_asset_by_id_error(self):
        """Test error handling for delete_environment_asset_by_id"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        asset_id = "asset_id_example"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.delete_environment_asset_by_id(
                asset_id=asset_id,
            )
        assert exc_info.value.status == 400

    def test_get_environment_asset_by_id(self):
        """Test case for get_environment_asset_by_id

        Get an environment asset. Use to retrieve the details of environment asset by id.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        asset_id = "asset_id_example"  # str | Unique identifier of the asset.
        usage_info = True  # bool | Whether the query should include asset usage information as part of the response.
        comply_to_project = 56  # int | Include workload creation compliance information of an asset, for a given project, as part of the response. To check compliance, you need to provide both project id and workload type.
        comply_to_workload_type = "comply_to_workload_type_example"  # str | Include workload creation compliance information of an asset, for a given workload type, as part of the response. To check compliance, you need to provide both project id and workload type.
        comply_to_replica_type = "comply_to_replica_type_example"  # str | Include workload creation compliance information of an asset, for a given replica type, as part of the response. To check compliance, you need to provide both project id and workload type. For distributed, replica type should be provided as well.

        # Make request
        response = self.api.get_environment_asset_by_id(
            asset_id=asset_id,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/api/v1/asset/environment/{AssetId}" in kwargs["url"]

        # Verify query parameters
        assert "usageInfo=" in kwargs["url"]
        # Verify query parameters
        assert "complyToProject=" in kwargs["url"]
        # Verify query parameters
        assert "complyToWorkloadType=" in kwargs["url"]
        # Verify query parameters
        assert "complyToReplicaType=" in kwargs["url"]

        # Verify response
        assert isinstance(response, EnvironmentAsset)

    def test_get_environment_asset_by_id_error(self):
        """Test error handling for get_environment_asset_by_id"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        asset_id = "asset_id_example"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.get_environment_asset_by_id(
                asset_id=asset_id,
            )
        assert exc_info.value.status == 400

    def test_list_environment_assets(self):
        """Test case for list_environment_assets

        List environment assets. Use to retrieve a list of environment assets.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        name = "name_example"  # str | Filter results by name.
        scope = "scope_example"  # str | Filter results by scope.
        project_id = 56  # int | Filter results by project id. if scope filter is project, only assets from the specific project will be included in the response. otherwise, the response will include both project, department, cluster and tenant assets.
        department_id = "1"  # str | Filter using the department id.
        cluster_id = "d73a738f-fab3-430a-8fa3-5241493d7128"  # str | Filter using the Universally Unique Identifier (UUID) of the cluster.
        usage_info = True  # bool | Whether the query should include asset usage information as part of the response.
        comply_to_project = 56  # int | Include workload creation compliance information of an asset, for a given project, as part of the response. To check compliance, you need to provide both project id and workload type.
        comply_to_workload_type = "comply_to_workload_type_example"  # str | Include workload creation compliance information of an asset, for a given workload type, as part of the response. To check compliance, you need to provide both project id and workload type.
        distributed_framework = "distributed_framework_example"  # str | Filter results to workload of type distributed and distributedFramework.
        is_distributed = True  # bool | Filter results to workload of type distributed.
        is_training = True  # bool | Filter results to workload of type training.
        is_workspace = True  # bool | Filter results to workload of type workspace.
        is_inference = True  # bool | Filter results to workload of type inference.
        comply_to_replica_type = "comply_to_replica_type_example"  # str | Include workload creation compliance information of an asset, for a given replica type, as part of the response. To check compliance, you need to provide both project id and workload type. For distributed, replica type should be provided as well.

        # Make request
        response = self.api.list_environment_assets()

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/api/v1/asset/environment" in kwargs["url"]

        # Verify query parameters
        assert "name=" in kwargs["url"]
        # Verify query parameters
        assert "scope=" in kwargs["url"]
        # Verify query parameters
        assert "projectId=" in kwargs["url"]
        # Verify query parameters
        assert "departmentId=" in kwargs["url"]
        # Verify query parameters
        assert "clusterId=" in kwargs["url"]
        # Verify query parameters
        assert "usageInfo=" in kwargs["url"]
        # Verify query parameters
        assert "complyToProject=" in kwargs["url"]
        # Verify query parameters
        assert "complyToWorkloadType=" in kwargs["url"]
        # Verify query parameters
        assert "distributedFramework=" in kwargs["url"]
        # Verify query parameters
        assert "isDistributed=" in kwargs["url"]
        # Verify query parameters
        assert "isTraining=" in kwargs["url"]
        # Verify query parameters
        assert "isWorkspace=" in kwargs["url"]
        # Verify query parameters
        assert "isInference=" in kwargs["url"]
        # Verify query parameters
        assert "complyToReplicaType=" in kwargs["url"]

        # Verify response
        assert isinstance(response, EnvironmentListResponse)

    def test_list_environment_assets_error(self):
        """Test error handling for list_environment_assets"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.list_environment_assets()
        assert exc_info.value.status == 400

    def test_update_environment_asset_by_id(self):
        """Test case for update_environment_asset_by_id

        Update an environment asset. Use to update the details of environment asset by id.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        asset_id = "asset_id_example"  # str | Unique identifier of the asset.
        environment_update_request = (
            runai.EnvironmentUpdateRequest()
        )  # EnvironmentUpdateRequest |

        # Make request
        response = self.api.update_environment_asset_by_id(
            asset_id=asset_id,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "PUT"
        assert "/api/v1/asset/environment/{AssetId}" in kwargs["url"]

        # Verify body
        assert kwargs["body"] is not None

        # Verify response
        assert isinstance(response, EnvironmentAsset)

    def test_update_environment_asset_by_id_error(self):
        """Test error handling for update_environment_asset_by_id"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        asset_id = "asset_id_example"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.update_environment_asset_by_id(
                asset_id=asset_id,
            )
        assert exc_info.value.status == 400
