# coding: utf-8

"""
Runai API

# Introduction  The Run:AI Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://docs.run.ai/latest/developer/rest-auth/#request-an-api-token).

The version of the OpenAPI document: 2.19
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


import unittest

import runai
from runai.models.audit_log_record import AuditLogRecord


class TestAuditLogRecord(unittest.TestCase):
    """AuditLogRecord unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AuditLogRecord:
        """Test AuditLogRecord
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `AuditLogRecord`

        # model = AuditLogRecord()
        if include_optional:
            return AuditLogRecord(
                id=12,
                cluster_uuid="71f69d83-ba66-4822-adf5-55ce55efd210",
                tenant_id=1001,
                happened_at="2022-06-08T11:28:24.131Z",
                action="Create",
                version="1",
                entity_id="51",
                entity_type="Department",
                entity_name="MyDepartment123",
                source_type="User",
                source_id="96a4382e-afa5-4604-9eb1-c3071aa021fc",
                source_name="test@run.ai",
                error={
                    "status": 404,
                    "description": "Cluster with uuid '19519f4b-e3a5-45c7-9451-0def7b931546' does not exist",
                    "errorType": "BackendError",
                },
                context={
                    "user_agent": "Thunder Client (https://www.thunderclient.com)"
                },
                body={
                    "name": "test1",
                    "deservedGpus": 1,
                    "allowOverQuota": False,
                    "maxAllowedGpus": 1,
                },
            )
        else:
            return AuditLogRecord()

    def testAuditLogRecord(self):
        """Test AuditLogRecord"""
        inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()
