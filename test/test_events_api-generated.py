# coding: utf-8

"""
Test file for EventsApi
Generated by OpenAPI Generator with custom template
"""

import pytest
import unittest.mock as mock
from datetime import datetime, timezone
import json

from runai.configuration import Configuration
from runai.api_client import ApiClient
from runai.models import *
from runai.exceptions import ApiException


class TestEventsApi:
    """Test cases for EventsApi"""

    @pytest.fixture(autouse=True)
    def setup(self):
        """Setup test fixtures"""
        self.configuration = Configuration(
            client_id="test-client",
            client_secret="test-secret",
            runai_base_url="https://test.run.ai",
        )
        self.api_client = ApiClient(self.configuration)
        self.api = EventsApi(self.api_client)

        # Mock the request method
        self.request_patcher = mock.patch.object(self.api_client.rest_client, "request")
        self.mock_request = self.request_patcher.start()
        yield
        self.request_patcher.stop()

    def test_get_revision_events(self):
        """Test case for get_revision_events

        Get revision events by id. [Experimental] Retrieve all the revision events using a revision id. Supported for clusters v2.21+.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        revision_id = "revision_id_example"  # str | The  Universally Unique Identifier (UUID) of the revision.
        offset = 100  # int | The offset of the first item returned in the collection.
        limit = 50  # int | The maximum number of entries to return.
        sort_order = desc  # str | Sort results in descending or ascending order.

        # Make request
        response = self.api.get_revision_events(
            revision_id=revision_id,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert (
            "/api/v1/workloads/inferences/revisions/{revisionId}/events"
            in kwargs["url"]
        )

        # Verify query parameters
        assert "offset=" in kwargs["url"]
        # Verify query parameters
        assert "limit=" in kwargs["url"]
        # Verify query parameters
        assert "sortOrder=" in kwargs["url"]

        # Verify response
        assert isinstance(response, GetWorkloadEvents200Response)

    def test_get_revision_events_error(self):
        """Test error handling for get_revision_events"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        revision_id = "revision_id_example"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.get_revision_events(
                revision_id=revision_id,
            )
        assert exc_info.value.status == 400

    def test_get_revision_history(self):
        """Test case for get_revision_history

        Get the revision history. [Experimental] Retrieve revision history details, including events, using a revision id. Supported for clusters v2.21+.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        revision_id = "revision_id_example"  # str | The  Universally Unique Identifier (UUID) of the revision.
        offset = 100  # int | The offset of the first item returned in the collection.
        limit = 50  # int | The maximum number of entries to return.

        # Make request
        response = self.api.get_revision_history(
            revision_id=revision_id,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert (
            "/api/v1/workloads/inferences/revisions/{revisionId}/history"
            in kwargs["url"]
        )

        # Verify query parameters
        assert "offset=" in kwargs["url"]
        # Verify query parameters
        assert "limit=" in kwargs["url"]

        # Verify response
        assert isinstance(response, GetWorkloadHistory200Response)

    def test_get_revision_history_error(self):
        """Test error handling for get_revision_history"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        revision_id = "revision_id_example"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.get_revision_history(
                revision_id=revision_id,
            )
        assert exc_info.value.status == 400

    def test_get_workload_events(self):
        """Test case for get_workload_events

        Get the workload events. Retrieve all the workload events using a workload id.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        workload_id = "workload_id_example"  # str | The  Universally Unique Identifier (UUID) of the workload.
        offset = 100  # int | The offset of the first item returned in the collection.
        limit = 50  # int | The maximum number of entries to return.
        sort_order = desc  # str | Sort results in descending or ascending order.

        # Make request
        response = self.api.get_workload_events(
            workload_id=workload_id,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/api/v1/workloads/{workloadId}/events" in kwargs["url"]

        # Verify query parameters
        assert "offset=" in kwargs["url"]
        # Verify query parameters
        assert "limit=" in kwargs["url"]
        # Verify query parameters
        assert "sortOrder=" in kwargs["url"]

        # Verify response
        assert isinstance(response, GetWorkloadEvents200Response)

    def test_get_workload_events_error(self):
        """Test error handling for get_workload_events"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        workload_id = "workload_id_example"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.get_workload_events(
                workload_id=workload_id,
            )
        assert exc_info.value.status == 400

    def test_get_workload_history(self):
        """Test case for get_workload_history

        Get the workload history. Retrieve workload history details, including events, using a workload id.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        workload_id = "workload_id_example"  # str | The  Universally Unique Identifier (UUID) of the workload.
        offset = 100  # int | The offset of the first item returned in the collection.
        limit = 50  # int | The maximum number of entries to return.

        # Make request
        response = self.api.get_workload_history(
            workload_id=workload_id,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/api/v1/workloads/{workloadId}/history" in kwargs["url"]

        # Verify query parameters
        assert "offset=" in kwargs["url"]
        # Verify query parameters
        assert "limit=" in kwargs["url"]

        # Verify response
        assert isinstance(response, GetWorkloadHistory200Response)

    def test_get_workload_history_error(self):
        """Test error handling for get_workload_history"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        workload_id = "workload_id_example"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.get_workload_history(
                workload_id=workload_id,
            )
        assert exc_info.value.status == 400
