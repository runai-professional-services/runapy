# coding: utf-8

"""
Run:ai API

# Introduction  The Run:ai Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://docs.run.ai/latest/developer/rest-auth/#request-an-api-token).

The version of the OpenAPI document: latest
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


import unittest

import runai
from runai.models.distributed_policy_change_request_v2 import (
    DistributedPolicyChangeRequestV2,
)


class TestDistributedPolicyChangeRequestV2(unittest.TestCase):
    """DistributedPolicyChangeRequestV2 unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DistributedPolicyChangeRequestV2:
        """Test DistributedPolicyChangeRequestV2
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `DistributedPolicyChangeRequestV2`

        # model = DistributedPolicyChangeRequestV2()
        if include_optional:
            return DistributedPolicyChangeRequestV2(
                meta=runai.models.policy_creation_fields.PolicyCreationFields(
                    scope="system",
                    project_id=1,
                    department_id="2",
                    cluster_id="71f69d83-ba66-4822-adf5-55ce55efd210",
                    name="my-policy",
                ),
                policy=runai.models.distributed_policy_defaults_and_rules_v2.DistributedPolicyDefaultsAndRulesV2(
                    defaults=runai.models.distributed_policy_defaults_v2.DistributedPolicyDefaultsV2(
                        worker=runai.models.distributed_policy_defaults_v2_worker.DistributedPolicyDefaultsV2_worker(),
                        master=runai.models.replica_defaults_v2.ReplicaDefaultsV2(),
                    ),
                    rules=runai.models.distributed_policy_rules_v2.DistributedPolicyRulesV2(),
                    imposed_assets=runai.models.distributed_imposed_assets.DistributedImposedAssets(),
                    status=runai.models.policy_validation_status.PolicyValidationStatus(
                        validation=runai.models.policy_validation_status_validation.PolicyValidationStatus_validation(
                            error_message="",
                        ),
                    ),
                ),
                reset=["master.security.runAsGpu", "worker.compute.gpu"],
            )
        else:
            return DistributedPolicyChangeRequestV2()

    def testDistributedPolicyChangeRequestV2(self):
        """Test DistributedPolicyChangeRequestV2"""
        inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()
