# coding: utf-8

"""
Test file for WorkloadsApi
Generated by OpenAPI Generator with custom template
"""

import pytest
import unittest.mock as mock
from datetime import datetime, timezone
import json

from runai.configuration import Configuration
from runai.api_client import ApiClient
from runai.models import *
from runai.exceptions import ApiException


class TestWorkloadsApi:
    """Test cases for WorkloadsApi"""

    @pytest.fixture(autouse=True)
    def setup(self):
        """Setup test fixtures"""
        self.configuration = Configuration(
            client_id="test-client",
            client_secret="test-secret",
            runai_base_url="https://test.run.ai",
        )
        self.api_client = ApiClient(self.configuration)
        self.api = WorkloadsApi(self.api_client)

        # Mock the request method
        self.request_patcher = mock.patch.object(self.api_client.rest_client, "request")
        self.mock_request = self.request_patcher.start()
        yield
        self.request_patcher.stop()

    def test_count_workloads(self):
        """Test case for count_workloads

        Count workloads. Retrieve the number of workloads.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        deleted = True  # bool | Return only deleted resources when `true`.
        filter_by = [
            '["name!=some-workload-name","allocatedGPU>=2","createdAt>=2021-01-01T00:00:00Z"]'
        ]  # List[str] | Filter results by a parameter. Use the format field-name operator value. Operators are `==` Equals, `!=` Not equals, `<=` Less than or equal, `>=` Greater than or equal, `=@` contains, `!@` Does not contain, `=^` Starts with and `=$` Ends with. Dates are in ISO 8601 timestamp format and available for operators `==`, `!=`, `<=` and `>=`.

        # Make request
        response = self.api.count_workloads()

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/api/v1/workloads/count" in kwargs["url"]

        # Verify query parameters
        assert "deleted=" in kwargs["url"]
        # Verify query parameters
        assert "filterBy=" in kwargs["url"]

        # Verify response
        assert isinstance(response, CountDepartments200Response)

    def test_count_workloads_error(self):
        """Test error handling for count_workloads"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.count_workloads()
        assert exc_info.value.status == 400

    def test_get_workload(self):
        """Test case for get_workload

        Get a workload. Retrieve workload data using a &#x60;workloadId&#x60;.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        workload_id = "workload_id_example"  # str | The  Universally Unique Identifier (UUID) of the workload.

        # Make request
        response = self.api.get_workload(
            workload_id=workload_id,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/api/v1/workloads/{workloadId}" in kwargs["url"]

        # Verify response
        assert isinstance(response, WorkloadDetailed)

    def test_get_workload_error(self):
        """Test error handling for get_workload"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        workload_id = "workload_id_example"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.get_workload(
                workload_id=workload_id,
            )
        assert exc_info.value.status == 400

    def test_get_workload_metrics(self):
        """Test case for get_workload_metrics

        Get workload metrics data. [Experimental] Retrieves workloads data metrics from the metrics database. Use in reporting and analysis tools.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        workload_id = "workload_id_example"  # str | The  Universally Unique Identifier (UUID) of the workload.
        metric_type = [
            runai.WorkloadMetricType()
        ]  # List[WorkloadMetricType] | Specify which data to request.
        start = "2023-06-06T12:09:18.211Z"  # datetime | Start date of time range to fetch data in ISO 8601 timestamp format.
        end = "2023-06-07T12:09:18.211Z"  # datetime | End date of time range to fetch data in ISO 8601 timestamp format.
        number_of_samples = (
            20  # int | The number of samples to take in the specified time range.
        )

        # Make request
        response = self.api.get_workload_metrics(
            workload_id=workload_id,
            metric_type=metric_type,
            start=start,
            end=end,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/api/v1/workloads/{workloadId}/metrics" in kwargs["url"]

        # Verify query parameters
        assert "metricType=" in kwargs["url"]
        # Verify query parameters
        assert "start=" in kwargs["url"]
        # Verify query parameters
        assert "end=" in kwargs["url"]
        # Verify query parameters
        assert "numberOfSamples=" in kwargs["url"]

        # Verify response
        assert isinstance(response, MetricsResponse)

    def test_get_workload_metrics_error(self):
        """Test error handling for get_workload_metrics"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        workload_id = "workload_id_example"
        metric_type = [runai.WorkloadMetricType()]
        start = "2023-06-06T12:09:18.211Z"
        end = "2023-06-07T12:09:18.211Z"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.get_workload_metrics(
                workload_id=workload_id,
                metric_type=metric_type,
                start=start,
                end=end,
            )
        assert exc_info.value.status == 400

    def test_get_workloads(self):
        """Test case for get_workloads

        List workloads. Retrieve a list of active workloads with details.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        deleted = True  # bool | Return only deleted resources when `true`.
        offset = 100  # int | The offset of the first item returned in the collection.
        limit = 50  # int | The maximum number of entries to return.
        sort_order = asc  # str | Sort results in descending or ascending order.
        sort_by = "sort_by_example"  # str | Sort results by a parameter.
        filter_by = [
            '["name!=some-workload-name","allocatedGPU>=2","createdAt>=2021-01-01T00:00:00Z"]'
        ]  # List[str] | Filter results by a parameter. Use the format field-name operator value. Operators are `==` Equals, `!=` Not equals, `<=` Less than or equal, `>=` Greater than or equal, `=@` contains, `!@` Does not contain, `=^` Starts with and `=$` Ends with. Dates are in ISO 8601 timestamp format and available for operators `==`, `!=`, `<=` and `>=`.

        # Make request
        response = self.api.get_workloads()

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/api/v1/workloads" in kwargs["url"]

        # Verify query parameters
        assert "deleted=" in kwargs["url"]
        # Verify query parameters
        assert "offset=" in kwargs["url"]
        # Verify query parameters
        assert "limit=" in kwargs["url"]
        # Verify query parameters
        assert "sortOrder=" in kwargs["url"]
        # Verify query parameters
        assert "sortBy=" in kwargs["url"]
        # Verify query parameters
        assert "filterBy=" in kwargs["url"]

        # Verify response
        assert isinstance(response, GetWorkloads200Response)

    def test_get_workloads_error(self):
        """Test error handling for get_workloads"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.get_workloads()
        assert exc_info.value.status == 400

    def test_get_workloads_telemetry(self):
        """Test case for get_workloads_telemetry

        Get the workloads telemetry. [Experimental] Retrieves workload data by telemetry type.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        telemetry_type = (
            runai.WorkloadTelemetryType()
        )  # WorkloadTelemetryType | Specifies the telemetry type.
        cluster_id = "d73a738f-fab3-430a-8fa3-5241493d7128"  # str | Filter using the Universally Unique Identifier (UUID) of the cluster.
        nodepool_name = "default"  # str | Filter using the nodepool.
        department_id = "1"  # str | Filter using the department id.
        group_by = ["group_by_example"]  # List[str] | Group workloads by field.

        # Make request
        response = self.api.get_workloads_telemetry(
            telemetry_type=telemetry_type,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/api/v1/workloads/telemetry" in kwargs["url"]

        # Verify query parameters
        assert "clusterId=" in kwargs["url"]
        # Verify query parameters
        assert "nodepoolName=" in kwargs["url"]
        # Verify query parameters
        assert "departmentId=" in kwargs["url"]
        # Verify query parameters
        assert "groupBy=" in kwargs["url"]
        # Verify query parameters
        assert "telemetryType=" in kwargs["url"]

        # Verify response
        assert isinstance(response, TelemetryResponse)

    def test_get_workloads_telemetry_error(self):
        """Test error handling for get_workloads_telemetry"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        telemetry_type = runai.WorkloadTelemetryType()

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.get_workloads_telemetry(
                telemetry_type=telemetry_type,
            )
        assert exc_info.value.status == 400
