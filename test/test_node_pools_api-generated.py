# coding: utf-8

"""
Test file for NodePoolsApi
Generated by OpenAPI Generator with custom template
"""

import pytest
import unittest.mock as mock
from datetime import datetime, timezone
import json

from runai.configuration import Configuration
from runai.api_client import ApiClient
from runai.models import *
from runai.exceptions import ApiException


class TestNodePoolsApi:
    """Test cases for NodePoolsApi"""

    @pytest.fixture(autouse=True)
    def setup(self):
        """Setup test fixtures"""
        self.configuration = Configuration(
            client_id="test-client",
            client_secret="test-secret",
            runai_base_url="https://test.run.ai",
        )
        self.api_client = ApiClient(self.configuration)
        self.api = NodePoolsApi(self.api_client)

        # Mock the request method
        self.request_patcher = mock.patch.object(self.api_client.rest_client, "request")
        self.mock_request = self.request_patcher.start()
        yield
        self.request_patcher.stop()

    def test_create_node_pool(self):
        """Test case for create_node_pool

        Create a Node Pool. Use to create a node pool in a cluster by Universally Unique Identifier (UUID). Deprecated, please use /api/v1/node-pools instead.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({})
        self.mock_request.return_value = mock_response

        # Test parameters
        cluster_id = "cluster_id_example"  # str | Unique identifier of the cluster
        node_pool_create_request = (
            runai.NodePoolCreateRequest()
        )  # NodePoolCreateRequest |

        # Make request
        self.api.create_node_pool(
            cluster_id=cluster_id,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "POST"
        assert "/v1/k8s/clusters/{clusterId}/node-pools" in kwargs["url"]

        # Verify body
        assert kwargs["body"] is not None

    def test_create_node_pool_error(self):
        """Test error handling for create_node_pool"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        cluster_id = "cluster_id_example"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.create_node_pool(
                cluster_id=cluster_id,
            )
        assert exc_info.value.status == 400

    def test_create_nodepool(self):
        """Test case for create_nodepool

        Create nodepool Create nodepool
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        nodepool_create_fields = (
            runai.NodepoolCreateFields()
        )  # NodepoolCreateFields | Nodepool to create.

        # Make request
        response = self.api.create_nodepool(
            nodepool_create_fields=nodepool_create_fields,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "POST"
        assert "/api/v1/node-pools" in kwargs["url"]

        # Verify body
        assert kwargs["body"] is not None

        # Verify response
        assert isinstance(response, Nodepool)

    def test_create_nodepool_error(self):
        """Test error handling for create_nodepool"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        nodepool_create_fields = runai.NodepoolCreateFields()

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.create_nodepool(
                nodepool_create_fields=nodepool_create_fields,
            )
        assert exc_info.value.status == 400

    def test_delete_node_pool(self):
        """Test case for delete_node_pool

        Delete a Node Pool by id.ยง Use to delete a node pool by Universally Unique Identifier (UUID). Deprecated, please use /api/v1/node-pools/{id} instead.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({})
        self.mock_request.return_value = mock_response

        # Test parameters
        cluster_id = "cluster_id_example"  # str | Unique identifier of the cluster
        id = 56  # int | The unique id identifying the Node Pool.

        # Make request
        self.api.delete_node_pool(
            cluster_id=cluster_id,
            id=id,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "DELETE"
        assert "/v1/k8s/clusters/{clusterId}/node-pools/{id}" in kwargs["url"]

    def test_delete_node_pool_error(self):
        """Test error handling for delete_node_pool"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        cluster_id = "cluster_id_example"
        id = 56

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.delete_node_pool(
                cluster_id=cluster_id,
                id=id,
            )
        assert exc_info.value.status == 400

    def test_delete_nodepool(self):
        """Test case for delete_nodepool

        Delete nodepool Delete nodepool
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        nodepool_id = "17"  # str | The unique id identifying the Node Pool.

        # Make request
        response = self.api.delete_nodepool(
            nodepool_id=nodepool_id,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "DELETE"
        assert "/api/v1/node-pools/{nodepoolId}" in kwargs["url"]

        # Verify response
        assert isinstance(response, HttpResponse)

    def test_delete_nodepool_error(self):
        """Test error handling for delete_nodepool"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        nodepool_id = "17"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.delete_nodepool(
                nodepool_id=nodepool_id,
            )
        assert exc_info.value.status == 400

    def test_get_node_pools(self):
        """Test case for get_node_pools

        Get the cluster's Node Pools. Retrieve all the node pools with details from the cluster by Universally Unique Identifier (UUID). Deprecated, please use /api/v1/node-pools instead.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        cluster_id = "cluster_id_example"  # str | Unique identifier of the cluster

        # Make request
        response = self.api.get_node_pools(
            cluster_id=cluster_id,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/v1/k8s/clusters/{clusterId}/node-pools" in kwargs["url"]

        # Verify response
        assert isinstance(response, List[NodePool1])

    def test_get_node_pools_error(self):
        """Test error handling for get_node_pools"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        cluster_id = "cluster_id_example"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.get_node_pools(
                cluster_id=cluster_id,
            )
        assert exc_info.value.status == 400

    def test_get_nodepool(self):
        """Test case for get_nodepool

        Get nodepool Get nodepool
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        nodepool_id = "17"  # str | The unique id identifying the Node Pool.

        # Make request
        response = self.api.get_nodepool(
            nodepool_id=nodepool_id,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/api/v1/node-pools/{nodepoolId}" in kwargs["url"]

        # Verify response
        assert isinstance(response, Nodepool)

    def test_get_nodepool_error(self):
        """Test error handling for get_nodepool"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        nodepool_id = "17"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.get_nodepool(
                nodepool_id=nodepool_id,
            )
        assert exc_info.value.status == 400

    def test_get_nodepool_metrics(self):
        """Test case for get_nodepool_metrics

        Get the node pool metrics data. [Experimental] Retrieve the node pool metrics data by Universally Unique Identifier (UUID).
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        cluster_uuid = "9f55255e-11ed-47c7-acef-fc4054768dbc"  # str | The Universally Unique Identifier (UUID) of the cluster.
        nodepool_name = "default"  # str | The unique nodepool name.
        start = "2023-06-06T12:09:18.211Z"  # datetime | Start date of time range to fetch data in ISO 8601 timestamp format.
        end = "2023-06-07T12:09:18.211Z"  # datetime | End date of time range to fetch data in ISO 8601 timestamp format.
        metric_type = [
            runai.MetricsType()
        ]  # List[MetricsType] | specifies what data to request
        number_of_samples = (
            20  # int | The number of samples to take in the specified time range.
        )

        # Make request
        response = self.api.get_nodepool_metrics(
            cluster_uuid=cluster_uuid,
            nodepool_name=nodepool_name,
            start=start,
            end=end,
            metric_type=metric_type,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert (
            "/api/v1/clusters/{clusterUuid}/nodepools/{nodepoolName}/metrics"
            in kwargs["url"]
        )

        # Verify query parameters
        assert "start=" in kwargs["url"]
        # Verify query parameters
        assert "end=" in kwargs["url"]
        # Verify query parameters
        assert "numberOfSamples=" in kwargs["url"]
        # Verify query parameters
        assert "metricType=" in kwargs["url"]

        # Verify response
        assert isinstance(response, MetricsResponse)

    def test_get_nodepool_metrics_error(self):
        """Test error handling for get_nodepool_metrics"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        cluster_uuid = "9f55255e-11ed-47c7-acef-fc4054768dbc"
        nodepool_name = "default"
        start = "2023-06-06T12:09:18.211Z"
        end = "2023-06-07T12:09:18.211Z"
        metric_type = [runai.MetricsType()]

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.get_nodepool_metrics(
                cluster_uuid=cluster_uuid,
                nodepool_name=nodepool_name,
                start=start,
                end=end,
                metric_type=metric_type,
            )
        assert exc_info.value.status == 400

    def test_get_nodepools(self):
        """Test case for get_nodepools

        Get nodepools Get nodepools
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        filter_by = [
            '["name!=some-name"]'
        ]  # List[str] | Filter results by a parameter. Use the format field-name operator value. Operators are == Equals, != Not equals, <= Less than or equal, >= Greater than or equal, =@ contains, !@ Does not contains, =^ Starts with and =$ Ends with. Dates are in ISO 8601 timestamp format and available for operators == None, != None, <= and >=.
        sort_by = (
            runai.NodepoolSortFilterFields()
        )  # NodepoolSortFilterFields | Sort results by a parameters.
        sort_order = asc  # str | Sort results in descending or ascending order.
        offset = 100  # int | The offset of the first item returned in the collection.
        limit = 50  # int | The maximum number of entries to return.

        # Make request
        response = self.api.get_nodepools()

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/api/v1/node-pools" in kwargs["url"]

        # Verify query parameters
        assert "filterBy=" in kwargs["url"]
        # Verify query parameters
        assert "sortBy=" in kwargs["url"]
        # Verify query parameters
        assert "sortOrder=" in kwargs["url"]
        # Verify query parameters
        assert "offset=" in kwargs["url"]
        # Verify query parameters
        assert "limit=" in kwargs["url"]

        # Verify response
        assert isinstance(response, GetNodepools200Response)

    def test_get_nodepools_error(self):
        """Test error handling for get_nodepools"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.get_nodepools()
        assert exc_info.value.status == 400

    def test_patch_nodepool(self):
        """Test case for patch_nodepool

        Patch nodepool fields Update only specific fields of a nodepool
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        nodepool_id = "17"  # str | The unique id identifying the Node Pool.
        nodepool_update_fields = (
            runai.NodepoolUpdateFields()
        )  # NodepoolUpdateFields | Fields to update.

        # Make request
        response = self.api.patch_nodepool(
            nodepool_id=nodepool_id,
            nodepool_update_fields=nodepool_update_fields,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "PATCH"
        assert "/api/v1/node-pools/{nodepoolId}" in kwargs["url"]

        # Verify body
        assert kwargs["body"] is not None

        # Verify response
        assert isinstance(response, Nodepool)

    def test_patch_nodepool_error(self):
        """Test error handling for patch_nodepool"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        nodepool_id = "17"
        nodepool_update_fields = runai.NodepoolUpdateFields()

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.patch_nodepool(
                nodepool_id=nodepool_id,
                nodepool_update_fields=nodepool_update_fields,
            )
        assert exc_info.value.status == 400

    def test_update_node_pool(self):
        """Test case for update_node_pool

        Update a Node Pool. Use to update the details of a node pool by Universally Unique Identifier (UUID). Deprecated, please use PATCH /api/v1/node-pools/{id} instead.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({})
        self.mock_request.return_value = mock_response

        # Test parameters
        cluster_id = "cluster_id_example"  # str | Unique identifier of the cluster
        id = 56  # int | The unique id identifying the Node Pool.
        update_node_pool_request = (
            runai.UpdateNodePoolRequest()
        )  # UpdateNodePoolRequest |

        # Make request
        self.api.update_node_pool(
            cluster_id=cluster_id,
            id=id,
            update_node_pool_request=update_node_pool_request,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "PUT"
        assert "/v1/k8s/clusters/{clusterId}/node-pools/{id}" in kwargs["url"]

        # Verify body
        assert kwargs["body"] is not None

    def test_update_node_pool_error(self):
        """Test error handling for update_node_pool"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        cluster_id = "cluster_id_example"
        id = 56
        update_node_pool_request = runai.UpdateNodePoolRequest()

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.update_node_pool(
                cluster_id=cluster_id,
                id=id,
                update_node_pool_request=update_node_pool_request,
            )
        assert exc_info.value.status == 400

    def test_update_node_pool_labels(self):
        """Test case for update_node_pool_labels

        Update labels of a Node Pool. Use to update the labels of a node pool. Deprecated, please use PATCH /api/v1/node-pools/{id} instead.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({})
        self.mock_request.return_value = mock_response

        # Test parameters
        cluster_id = "cluster_id_example"  # str | Unique identifier of the cluster
        id = 56  # int | The unique id identifying the Node Pool.
        node_pool_labels_request = (
            runai.NodePoolLabelsRequest()
        )  # NodePoolLabelsRequest |

        # Make request
        self.api.update_node_pool_labels(
            cluster_id=cluster_id,
            id=id,
            node_pool_labels_request=node_pool_labels_request,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "PUT"
        assert "/v1/k8s/clusters/{clusterId}/node-pools/{id}/labels" in kwargs["url"]

        # Verify body
        assert kwargs["body"] is not None

    def test_update_node_pool_labels_error(self):
        """Test error handling for update_node_pool_labels"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        cluster_id = "cluster_id_example"
        id = 56
        node_pool_labels_request = runai.NodePoolLabelsRequest()

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.update_node_pool_labels(
                cluster_id=cluster_id,
                id=id,
                node_pool_labels_request=node_pool_labels_request,
            )
        assert exc_info.value.status == 400

    def test_update_nodepool(self):
        """Test case for update_nodepool

        Update nodepool Update nodepool
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        nodepool_id = "17"  # str | The unique id identifying the Node Pool.
        nodepool_update_fields = (
            runai.NodepoolUpdateFields()
        )  # NodepoolUpdateFields | Nodepool to update.

        # Make request
        response = self.api.update_nodepool(
            nodepool_id=nodepool_id,
            nodepool_update_fields=nodepool_update_fields,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "PUT"
        assert "/api/v1/node-pools/{nodepoolId}" in kwargs["url"]

        # Verify body
        assert kwargs["body"] is not None

        # Verify response
        assert isinstance(response, Nodepool)

    def test_update_nodepool_error(self):
        """Test error handling for update_nodepool"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        nodepool_id = "17"
        nodepool_update_fields = runai.NodepoolUpdateFields()

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.update_nodepool(
                nodepool_id=nodepool_id,
                nodepool_update_fields=nodepool_update_fields,
            )
        assert exc_info.value.status == 400
