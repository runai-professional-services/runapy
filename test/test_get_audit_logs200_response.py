# coding: utf-8

"""
Run:ai API

# Introduction  The Run:ai Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://docs.run.ai/latest/developer/rest-auth/#request-an-api-token).

The version of the OpenAPI document: latest
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


import unittest

import runai
from runai.models.get_audit_logs200_response import GetAuditLogs200Response


class TestGetAuditLogs200Response(unittest.TestCase):
    """GetAuditLogs200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetAuditLogs200Response:
        """Test GetAuditLogs200Response
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `GetAuditLogs200Response`

        # model = GetAuditLogs200Response()
        if include_optional:
            return GetAuditLogs200Response(
                total=2000,
                next=100,
                audit_logs=[
                    runai.models.audit_log.AuditLog(
                        id="",
                        timestamp="2022-01-01T03:49:52.531Z",
                        tenant_id="12345",
                        subject="researcher@run.ai",
                        subject_type="User",
                        source_ip="",
                        action="create",
                        http_method="GET",
                        url="",
                        entity_type="project",
                        entity_name="project-1",
                        entity_id="1234",
                        result="Succeeded",
                        http_status_code=200,
                        cluster_name="my favorite cluster",
                        cluster_id="",
                        request_id="bb0c4742-e52f-4d5e-bfee-2c4ff57c339c",
                        metadata={"key' : '"},
                    )
                ],
            )
        else:
            return GetAuditLogs200Response()

    def testGetAuditLogs200Response(self):
        """Test GetAuditLogs200Response"""
        inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()
