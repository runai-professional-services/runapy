# coding: utf-8

"""
    Runai API

    # Introduction  The Run:AI Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://docs.run.ai/latest/developer/rest-auth/#request-an-api-token). 

    The version of the OpenAPI document: 2.18
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

import runai
from runai.models.connectivity_defaults import ConnectivityDefaults


class TestConnectivityDefaults(unittest.TestCase):
    """ConnectivityDefaults unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ConnectivityDefaults:
        """Test ConnectivityDefaults
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `ConnectivityDefaults`

        # model = ConnectivityDefaults()
        if include_optional:
            return ConnectivityDefaults(
                ports=runai.models.ports_defaults.PortsDefaults(
                    attributes=runai.models.port.Port(
                        container=8080,
                        service_type="LoadBalancer",
                        external=30080,
                        tool_type="pytorch",
                        tool_name="my-pytorch",
                        name="port-instance-a",
                    ),
                    instances=[
                        runai.models.port.Port(
                            container=8080,
                            external=30080,
                            tool_type="pytorch",
                            tool_name="my-pytorch",
                            name="port-instance-a",
                        )
                    ],
                ),
                exposed_urls=runai.models.exposed_urls_defaults.ExposedUrlsDefaults(
                    attributes=runai.models.exposed_url.ExposedUrl(
                        container=8080,
                        url="https://my-url.com",
                        authorized_users=["user-a", "user-b"],
                        authorized_groups=["group-a", "group-b"],
                        tool_type="jupyter",
                        tool_name="my-pytorch",
                        name="url-instance-a",
                    ),
                    instances=[
                        runai.models.exposed_url.ExposedUrl(
                            container=8080,
                            url="https://my-url.com",
                            authorized_users=["user-a", "user-b"],
                            authorized_groups=["group-a", "group-b"],
                            tool_type="jupyter",
                            tool_name="my-pytorch",
                            name="url-instance-a",
                        )
                    ],
                ),
                related_urls=runai.models.related_urls_defaults.RelatedUrlsDefaults(
                    attributes=runai.models.related_url.RelatedUrl(
                        url="https://my-url.com",
                        type="wandb",
                        name="url-instance-a",
                    ),
                    instances=[
                        runai.models.related_url.RelatedUrl(
                            url="https://my-url.com",
                            type="wandb",
                            name="url-instance-a",
                        )
                    ],
                ),
            )
        else:
            return ConnectivityDefaults()

    def testConnectivityDefaults(self):
        """Test ConnectivityDefaults"""
        inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()
