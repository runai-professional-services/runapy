# coding: utf-8

"""
    Test file for StorageClassesApi
    Generated by OpenAPI Generator with custom template
"""

import pytest
import unittest.mock as mock
from datetime import datetime, timezone
import json

from runai.configuration import Configuration
from runai.api_client import ApiClient
from runai.models import *
from runai.exceptions import ApiException


class TestStorageClassesApi:
    """Test cases for StorageClassesApi"""

    @pytest.fixture(autouse=True)
    def setup(self):
        """Setup test fixtures"""
        self.configuration = Configuration(
            client_id="test-client",
            client_secret="test-secret",
            runai_base_url="https://test.run.ai",
        )
        self.api_client = ApiClient(self.configuration)
        self.api = StorageClassesApi(self.api_client)

        # Mock the request method
        self.request_patcher = mock.patch.object(self.api_client.rest_client, "request")
        self.mock_request = self.request_patcher.start()
        yield
        self.request_patcher.stop()

    def test_get_storage_classes(self):
        """Test case for get_storage_classes

        Get all storageClasses from a cluster. Retrieve a list of storageClass names by Universally Unique Identifier (UUID) of the cluster.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        uuid = "uuid_example"  # str | Unique identifier of the cluster

        # Make request
        response = self.api.get_storage_classes(
            uuid=uuid,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/v1/k8s/clusters/{uuid}/storage-classes" in kwargs["url"]

        # Verify response
        assert isinstance(response, List[StorageClass])

    def test_get_storage_classes_error(self):
        """Test error handling for get_storage_classes"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        uuid = "uuid_example"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.get_storage_classes(
                uuid=uuid,
            )
        assert exc_info.value.status == 400
