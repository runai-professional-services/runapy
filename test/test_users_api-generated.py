# coding: utf-8

"""
Test file for UsersApi
Generated by OpenAPI Generator with custom template
"""

import pytest
import unittest.mock as mock
from datetime import datetime, timezone
import json

from runai.configuration import Configuration
from runai.api_client import ApiClient
from runai.models import *
from runai.exceptions import ApiException


class TestUsersApi:
    """Test cases for UsersApi"""

    @pytest.fixture(autouse=True)
    def setup(self):
        """Setup test fixtures"""
        self.configuration = Configuration(
            client_id="test-client",
            client_secret="test-secret",
            runai_base_url="https://test.run.ai",
        )
        self.api_client = ApiClient(self.configuration)
        self.api = UsersApi(self.api_client)

        # Mock the request method
        self.request_patcher = mock.patch.object(self.api_client.rest_client, "request")
        self.mock_request = self.request_patcher.start()
        yield
        self.request_patcher.stop()

    def test_change_user_password(self):
        """Test case for change_user_password

        change user password
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        user_change_password_request = (
            runai.UserChangePasswordRequest()
        )  # UserChangePasswordRequest | Password to change

        # Make request
        response = self.api.change_user_password(
            user_change_password_request=user_change_password_request,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "POST"
        assert "/api/v1/me/password" in kwargs["url"]

        # Verify body
        assert kwargs["body"] is not None

        # Verify response
        assert isinstance(response, ChangeUserPassword200Response)

    def test_change_user_password_error(self):
        """Test error handling for change_user_password"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        user_change_password_request = runai.UserChangePasswordRequest()

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.change_user_password(
                user_change_password_request=user_change_password_request,
            )
        assert exc_info.value.status == 400

    def test_count_users(self):
        """Test case for count_users

        Count users count users
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        filter_by = [
            '["username=@test,lastLogin>=2024-09-24T00:00:00.00Z,isLocal==false"]'
        ]  # List[str] | Filter results by a parameter. Use the format field-name operator value. Operators are <= Less than or equal, >= Greater than or equal, =@ contains. Dates are in ISO 8601 timestamp format and available for operators <= None, >= and ==.
        search = "test@run"  # str | Filter results by a free text search.

        # Make request
        response = self.api.count_users()

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/api/v1/users/count" in kwargs["url"]

        # Verify query parameters
        assert "filterBy=" in kwargs["url"]
        # Verify query parameters
        assert "search=" in kwargs["url"]

        # Verify response
        assert isinstance(response, CountAccessRules200Response)

    def test_count_users_error(self):
        """Test error handling for count_users"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.count_users()
        assert exc_info.value.status == 400

    def test_create_group(self):
        """Test case for create_group

        Create a new group. Create a new group and assign it with roles. Deprecated endpoint. please reffer to Roles &amp; Access rules API.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        group_creation_request = runai.GroupCreationRequest()  # GroupCreationRequest |

        # Make request
        response = self.api.create_group(
            group_creation_request=group_creation_request,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "POST"
        assert "/v1/k8s/groups" in kwargs["url"]

        # Verify body
        assert kwargs["body"] is not None

        # Verify response
        assert isinstance(response, GroupCreationResponse)

    def test_create_group_error(self):
        """Test error handling for create_group"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        group_creation_request = runai.GroupCreationRequest()

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.create_group(
                group_creation_request=group_creation_request,
            )
        assert exc_info.value.status == 400

    def test_create_user(self):
        """Test case for create_user

        Create a new user. Deprecated endpoint. Use the new endpoint api/v1/users instead and api/v1/authorization/access-rules to give user permissions.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        user_creation_request = runai.UserCreationRequest()  # UserCreationRequest |

        # Make request
        response = self.api.create_user(
            user_creation_request=user_creation_request,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "POST"
        assert "/v1/k8s/users" in kwargs["url"]

        # Verify body
        assert kwargs["body"] is not None

        # Verify response
        assert isinstance(response, UserCreationResponse)

    def test_create_user_error(self):
        """Test error handling for create_user"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        user_creation_request = runai.UserCreationRequest()

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.create_user(
                user_creation_request=user_creation_request,
            )
        assert exc_info.value.status == 400

    def test_create_user_0(self):
        """Test case for create_user_0

        Create a local user. Use to create a local platform user.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        user_creation_request1 = (
            runai.UserCreationRequest1()
        )  # UserCreationRequest1 | User object to create

        # Make request
        response = self.api.create_user_0(
            user_creation_request1=user_creation_request1,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "POST"
        assert "/api/v1/users" in kwargs["url"]

        # Verify body
        assert kwargs["body"] is not None

        # Verify response
        assert isinstance(response, UserPostResponse)

    def test_create_user_0_error(self):
        """Test error handling for create_user_0"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        user_creation_request1 = runai.UserCreationRequest1()

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.create_user_0(
                user_creation_request1=user_creation_request1,
            )
        assert exc_info.value.status == 400

    def test_delete_group_by_name(self):
        """Test case for delete_group_by_name

        Delete a group. Delete the given group from the tenant. This endpoint requires ADMIN role. Deprecated endpoint. please reffer to Roles &amp; Access rules API.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({})
        self.mock_request.return_value = mock_response

        # Test parameters
        group_name = "group1"  # str |

        # Make request
        self.api.delete_group_by_name(
            group_name=group_name,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "DELETE"
        assert "/v1/k8s/groups/{groupName}" in kwargs["url"]

    def test_delete_group_by_name_error(self):
        """Test error handling for delete_group_by_name"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        group_name = "group1"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.delete_group_by_name(
                group_name=group_name,
            )
        assert exc_info.value.status == 400

    def test_delete_user_by_id(self):
        """Test case for delete_user_by_id

        Delete a user. Delete the given user from the tenant. This endpoint requires ADMIN role. Deprecated endpoint. Use the new endpoint api/v1/users/{userId} instead.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({})
        self.mock_request.return_value = mock_response

        # Test parameters
        user_id = "user_id_example"  # str |
        users_type = [
            runai.UserType()
        ]  # List[UserType] | Available only when SSO enabled

        # Make request
        self.api.delete_user_by_id(
            user_id=user_id,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "DELETE"
        assert "/v1/k8s/users/{userId}" in kwargs["url"]

        # Verify query parameters
        assert "usersType=" in kwargs["url"]

    def test_delete_user_by_id_error(self):
        """Test error handling for delete_user_by_id"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        user_id = "user_id_example"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.delete_user_by_id(
                user_id=user_id,
            )
        assert exc_info.value.status == 400

    def test_delete_user_by_id_0(self):
        """Test case for delete_user_by_id_0

        Delete a user by id. Use to delete a user by id.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({})
        self.mock_request.return_value = mock_response

        # Test parameters
        user_id = "user_id_example"  # str | The id of the user

        # Make request
        self.api.delete_user_by_id_0(
            user_id=user_id,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "DELETE"
        assert "/api/v1/users/{userId}" in kwargs["url"]

    def test_delete_user_by_id_0_error(self):
        """Test error handling for delete_user_by_id_0"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        user_id = "user_id_example"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.delete_user_by_id_0(
                user_id=user_id,
            )
        assert exc_info.value.status == 400

    def test_ge_group_by_name(self):
        """Test case for ge_group_by_name

        Get group details. Get the details of a given group. This endpoint requires ADMIN, EDITOR or VIEWER role. Deprecated endpoint. please reffer to Roles &amp; Access rules API.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        group_name = "group1"  # str |

        # Make request
        response = self.api.ge_group_by_name(
            group_name=group_name,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/v1/k8s/groups/{groupName}" in kwargs["url"]

        # Verify response
        assert isinstance(response, Group)

    def test_ge_group_by_name_error(self):
        """Test error handling for ge_group_by_name"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        group_name = "group1"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.ge_group_by_name(
                group_name=group_name,
            )
        assert exc_info.value.status == 400

    def test_get_groups(self):
        """Test case for get_groups

        Get groups list. Return the list of groups of the tenant. Deprecated endpoint. please reffer to Roles &amp; Access rules API.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        roles = [
            runai.Role()
        ]  # List[Role] | Filter the returned entities to only those with the required role
        only_created_by_me = True  # bool | Filter the returned entities to only those that created by the requesting subject

        # Make request
        response = self.api.get_groups()

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/v1/k8s/groups" in kwargs["url"]

        # Verify query parameters
        assert "roles=" in kwargs["url"]
        # Verify query parameters
        assert "onlyCreatedByMe=" in kwargs["url"]

        # Verify response
        assert isinstance(response, List[Group])

    def test_get_groups_error(self):
        """Test error handling for get_groups"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.get_groups()
        assert exc_info.value.status == 400

    def test_get_roles(self):
        """Test case for get_roles

        Get all possible permissions. Get the complete set of permissions that a tenant can grant to users and applications. Deprecated endpoint. please refer to Roles &amp; Access rules API.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters

        # Make request
        response = self.api.get_roles()

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/v1/k8s/users/roles" in kwargs["url"]

        # Verify response
        assert isinstance(response, List[Role])

    def test_get_roles_error(self):
        """Test error handling for get_roles"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.get_roles()
        assert exc_info.value.status == 400

    def test_get_user_by_id(self):
        """Test case for get_user_by_id

        Get user details. Get the details of a given user. This endpoint requires ADMIN, EDITOR or VIEWER role. Deprecated endpoint. Use the new endpoint api/v1/users/{userId} instead.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        user_id = "user_id_example"  # str |

        # Make request
        response = self.api.get_user_by_id(
            user_id=user_id,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/v1/k8s/users/{userId}" in kwargs["url"]

        # Verify response
        assert isinstance(response, User1)

    def test_get_user_by_id_error(self):
        """Test error handling for get_user_by_id"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        user_id = "user_id_example"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.get_user_by_id(
                user_id=user_id,
            )
        assert exc_info.value.status == 400

    def test_get_user_by_id_0(self):
        """Test case for get_user_by_id_0

        Get a user by id. Retrieve a user&#39;s details by id.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        user_id = "user_id_example"  # str | The id of the user

        # Make request
        response = self.api.get_user_by_id_0(
            user_id=user_id,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/api/v1/users/{userId}" in kwargs["url"]

        # Verify response
        assert isinstance(response, User2)

    def test_get_user_by_id_0_error(self):
        """Test error handling for get_user_by_id_0"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        user_id = "user_id_example"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.get_user_by_id_0(
                user_id=user_id,
            )
        assert exc_info.value.status == 400

    def test_get_user_roles(self):
        """Test case for get_user_roles

        Get user permissions. Return the set of permissions granted to a given user. Deprecated endpoint. please reffer to Roles &amp; Access rules API.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        user_id = "user_id_example"  # str |

        # Make request
        response = self.api.get_user_roles(
            user_id=user_id,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/v1/k8s/users/{userId}/roles" in kwargs["url"]

        # Verify response
        assert isinstance(response, List[Role])

    def test_get_user_roles_error(self):
        """Test error handling for get_user_roles"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        user_id = "user_id_example"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.get_user_roles(
                user_id=user_id,
            )
        assert exc_info.value.status == 400

    def test_get_users(self):
        """Test case for get_users

        Get users list. Deprecated, use /api/v1/users instead.  Return the list of users of the tenant.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        roles = [
            runai.Role()
        ]  # List[Role] | Filter the returned entities to only those with the required role
        only_created_by_me = True  # bool | Filter the returned entities to only those that created by the requesting subject
        users_type = [
            runai.UserType()
        ]  # List[UserType] | Available only when SSO enabled

        # Make request
        response = self.api.get_users()

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/v1/k8s/users" in kwargs["url"]

        # Verify query parameters
        assert "roles=" in kwargs["url"]
        # Verify query parameters
        assert "onlyCreatedByMe=" in kwargs["url"]
        # Verify query parameters
        assert "usersType=" in kwargs["url"]

        # Verify response
        assert isinstance(response, List[User1])

    def test_get_users_error(self):
        """Test error handling for get_users"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.get_users()
        assert exc_info.value.status == 400

    def test_get_users_0(self):
        """Test case for get_users_0

        Get users. Retrieve a list of platform users.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        filter = "runai.is_local:true"  # str | Filter results by user attribute.
        filter_by = [
            '["username=@test,lastLogin>=2024-09-24T00:00:00.00Z,isLocal==false"]'
        ]  # List[str] | Filter results by a parameter. Use the format field-name operator value. Operators are <= Less than or equal, >= Greater than or equal, =@ contains. Dates are in ISO 8601 timestamp format and available for operators <= None, >= and ==.
        sort_by = (
            runai.UsersFilterSortFields()
        )  # UsersFilterSortFields | Sort results by a parameters.
        sort_order = asc  # str | Sort results in descending or ascending order.
        offset = 100  # int | The offset of the first item returned in the collection.
        limit = 500  # int | The maximum number of entries to return.
        search = "test@run"  # str | Filter results by a free text search.

        # Make request
        response = self.api.get_users_0()

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/api/v1/users" in kwargs["url"]

        # Verify query parameters
        assert "filter=" in kwargs["url"]
        # Verify query parameters
        assert "filterBy=" in kwargs["url"]
        # Verify query parameters
        assert "sortBy=" in kwargs["url"]
        # Verify query parameters
        assert "sortOrder=" in kwargs["url"]
        # Verify query parameters
        assert "offset=" in kwargs["url"]
        # Verify query parameters
        assert "limit=" in kwargs["url"]
        # Verify query parameters
        assert "search=" in kwargs["url"]

        # Verify response
        assert isinstance(response, List[User2])

    def test_get_users_0_error(self):
        """Test error handling for get_users_0"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.get_users_0()
        assert exc_info.value.status == 400

    def test_logout_user(self):
        """Test case for logout_user

        Logout a user. Use to force a user to logout.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({})
        self.mock_request.return_value = mock_response

        # Test parameters
        user_id = "user_id_example"  # str | The id of the user

        # Make request
        self.api.logout_user(
            user_id=user_id,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "POST"
        assert "/api/v1/users/{userId}/logout" in kwargs["url"]

    def test_logout_user_error(self):
        """Test error handling for logout_user"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        user_id = "user_id_example"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.logout_user(
                user_id=user_id,
            )
        assert exc_info.value.status == 400

    def test_reset_user_password(self):
        """Test case for reset_user_password

        Reset a user's password. Use to to reset a user&#39;s password.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        user_id = "user_id_example"  # str | The id of the user

        # Make request
        response = self.api.reset_user_password(
            user_id=user_id,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "POST"
        assert "/api/v1/users/{userId}/password" in kwargs["url"]

        # Verify response
        assert isinstance(response, ResetUserPassword200Response)

    def test_reset_user_password_error(self):
        """Test error handling for reset_user_password"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        user_id = "user_id_example"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.reset_user_password(
                user_id=user_id,
            )
        assert exc_info.value.status == 400

    def test_update_group_by_name(self):
        """Test case for update_group_by_name

        Update group details. Update the details of a given group. This endpoint requires ADMIN role. Deprecated endpoint. please reffer to Roles &amp; Access rules API.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        group_name = "group1"  # str |
        group_with_name = runai.GroupWithName()  # GroupWithName |

        # Make request
        response = self.api.update_group_by_name(
            group_name=group_name,
            group_with_name=group_with_name,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "PUT"
        assert "/v1/k8s/groups/{groupName}" in kwargs["url"]

        # Verify body
        assert kwargs["body"] is not None

        # Verify response
        assert isinstance(response, Group)

    def test_update_group_by_name_error(self):
        """Test error handling for update_group_by_name"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        group_name = "group1"
        group_with_name = runai.GroupWithName()

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.update_group_by_name(
                group_name=group_name,
                group_with_name=group_with_name,
            )
        assert exc_info.value.status == 400

    def test_update_user_by_id(self):
        """Test case for update_user_by_id

        Update user details. Update the details of a given user. This endpoint requires ADMIN role. Deprecated endpoint. Use the new endpoint api/v1/users/{userId} instead.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        user_id = "user_id_example"  # str |
        user1 = runai.User1()  # User1 |

        # Make request
        response = self.api.update_user_by_id(
            user_id=user_id,
            user1=user1,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "PUT"
        assert "/v1/k8s/users/{userId}" in kwargs["url"]

        # Verify body
        assert kwargs["body"] is not None

        # Verify response
        assert isinstance(response, User1)

    def test_update_user_by_id_error(self):
        """Test error handling for update_user_by_id"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        user_id = "user_id_example"
        user1 = runai.User1()

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.update_user_by_id(
                user_id=user_id,
                user1=user1,
            )
        assert exc_info.value.status == 400
