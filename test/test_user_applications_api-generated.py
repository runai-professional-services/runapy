# coding: utf-8

"""
Test file for UserApplicationsApi
Generated by OpenAPI Generator with custom template
"""

import pytest
import unittest.mock as mock
from datetime import datetime, timezone
import json

from runai.configuration import Configuration
from runai.api_client import ApiClient
from runai.models import *
from runai.exceptions import ApiException


class TestUserApplicationsApi:
    """Test cases for UserApplicationsApi"""

    @pytest.fixture(autouse=True)
    def setup(self):
        """Setup test fixtures"""
        self.configuration = Configuration(
            client_id="test-client",
            client_secret="test-secret",
            runai_base_url="https://test.run.ai",
        )
        self.api_client = ApiClient(self.configuration)
        self.api = UserApplicationsApi(self.api_client)

        # Mock the request method
        self.request_patcher = mock.patch.object(self.api_client.rest_client, "request")
        self.mock_request = self.request_patcher.start()
        yield
        self.request_patcher.stop()

    def test_create_user_application(self):
        """Test case for create_user_application

        Create a user application. Used to create a user application.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        user_app_creation_request = (
            runai.UserAppCreationRequest()
        )  # UserAppCreationRequest | Application object to create

        # Make request
        response = self.api.create_user_application(
            user_app_creation_request=user_app_creation_request,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "POST"
        assert "/api/v1/user-applications" in kwargs["url"]

        # Verify body
        assert kwargs["body"] is not None

        # Verify response
        assert isinstance(response, UserAppPostResponse)

    def test_create_user_application_error(self):
        """Test error handling for create_user_application"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        user_app_creation_request = runai.UserAppCreationRequest()

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.create_user_application(
                user_app_creation_request=user_app_creation_request,
            )
        assert exc_info.value.status == 400

    def test_delete_user_application_by_id(self):
        """Test case for delete_user_application_by_id

        Delete a user application byid. Use to user a user application by id.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({})
        self.mock_request.return_value = mock_response

        # Test parameters
        app_id = "app_id_example"  # str | The application id to retrieve

        # Make request
        self.api.delete_user_application_by_id(
            app_id=app_id,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "DELETE"
        assert "/api/v1/user-applications/{appId}" in kwargs["url"]

    def test_delete_user_application_by_id_error(self):
        """Test error handling for delete_user_application_by_id"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        app_id = "app_id_example"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.delete_user_application_by_id(
                app_id=app_id,
            )
        assert exc_info.value.status == 400

    def test_delete_user_application_by_id_administration(self):
        """Test case for delete_user_application_by_id_administration

        Delete a user application by id for adminstrations. Use to delete a user application by id for adminstrations.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({})
        self.mock_request.return_value = mock_response

        # Test parameters
        app_id = "app_id_example"  # str | The application id to retrieve

        # Make request
        self.api.delete_user_application_by_id_administration(
            app_id=app_id,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "DELETE"
        assert "/api/v1/administration/user-applications/{appId}" in kwargs["url"]

    def test_delete_user_application_by_id_administration_error(self):
        """Test error handling for delete_user_application_by_id_administration"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        app_id = "app_id_example"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.delete_user_application_by_id_administration(
                app_id=app_id,
            )
        assert exc_info.value.status == 400

    def test_get_user_application_by_id(self):
        """Test case for get_user_application_by_id

        Get user application by id. Retrieve the details of a user&#39;s application by app id.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        app_id = "app_id_example"  # str | The application id to retrieve

        # Make request
        response = self.api.get_user_application_by_id(
            app_id=app_id,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/api/v1/user-applications/{appId}" in kwargs["url"]

        # Verify response
        assert isinstance(response, UserApp)

    def test_get_user_application_by_id_error(self):
        """Test error handling for get_user_application_by_id"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        app_id = "app_id_example"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.get_user_application_by_id(
                app_id=app_id,
            )
        assert exc_info.value.status == 400

    def test_get_user_applications(self):
        """Test case for get_user_applications

        Get a list of users applications. Retrieve a list of the users applications.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters

        # Make request
        response = self.api.get_user_applications()

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/api/v1/user-applications" in kwargs["url"]

        # Verify response
        assert isinstance(response, List[UserApp])

    def test_get_user_applications_error(self):
        """Test error handling for get_user_applications"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.get_user_applications()
        assert exc_info.value.status == 400

    def test_get_user_applications_administration(self):
        """Test case for get_user_applications_administration

        Get a list of all users applications. Retrieve a list of all users applications.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        client_id = (
            "3434c-12323ab-4ce2ea6-b44fc-db344d"  # str | Filter results by clientId
        )
        created_by = "test@run.ai"  # str | Filter results by creatdBy

        # Make request
        response = self.api.get_user_applications_administration()

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "GET"
        assert "/api/v1/administration/user-applications" in kwargs["url"]

        # Verify query parameters
        assert "clientId=" in kwargs["url"]
        # Verify query parameters
        assert "createdBy=" in kwargs["url"]

        # Verify response
        assert isinstance(response, List[UserAppAdministration])

    def test_get_user_applications_administration_error(self):
        """Test error handling for get_user_applications_administration"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.get_user_applications_administration()
        assert exc_info.value.status == 400

    def test_regenerate_user_application_secret(self):
        """Test case for regenerate_user_application_secret

        Regenerate a user application secret. Use to regenerate the user application secret by id.
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({"data": {}})
        self.mock_request.return_value = mock_response

        # Test parameters
        app_id = "app_id_example"  # str | The application id to retrieve

        # Make request
        response = self.api.regenerate_user_application_secret(
            app_id=app_id,
        )

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "POST"
        assert "/api/v1/user-applications/{appId}/secret" in kwargs["url"]

        # Verify response
        assert isinstance(response, RegenerateUserApplicationSecret200Response)

    def test_regenerate_user_application_secret_error(self):
        """Test error handling for regenerate_user_application_secret"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        app_id = "app_id_example"

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.regenerate_user_application_secret(
                app_id=app_id,
            )
        assert exc_info.value.status == 400
