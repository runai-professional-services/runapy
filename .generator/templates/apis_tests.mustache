# coding: utf-8

"""
    Test file for {{classname}}
    Generated by OpenAPI Generator with custom template
"""

import pytest
import unittest.mock as mock
from datetime import datetime, timezone
import json

from runai.configuration import Configuration
from runai.api_client import ApiClient
from runai.models import *
from runai.exceptions import ApiException


class Test{{classname}}:
    """Test cases for {{classname}}"""

    @pytest.fixture(autouse=True)
    def setup(self):
        """Setup test fixtures"""
        self.configuration = Configuration(
            client_id="test-client",
            client_secret="test-secret",
            runai_base_url="https://test.run.ai",
        )
        self.api_client = ApiClient(self.configuration)
        self.api = {{classname}}(self.api_client)
        
        # Mock the request method
        self.request_patcher = mock.patch.object(
            self.api_client.rest_client, "request"
        )
        self.mock_request = self.request_patcher.start()
        yield
        self.request_patcher.stop()

{{#operations}}
{{#operation}}
    def test_{{operationId}}(self):
        """Test case for {{operationId}}

        {{{summary}}} {{notes}}
        """
        # Mock response
        mock_response = mock.Mock()
        mock_response.status = 200
        mock_response.read.return_value = json.dumps({
            {{#returnType}}
            {{#isListContainer}}
            "items": []
            {{/isListContainer}}
            {{^isListContainer}}
            "data": {}
            {{/isListContainer}}
            {{/returnType}}
        })
        self.mock_request.return_value = mock_response

        # Test parameters
        {{#allParams}}
        {{paramName}} = {{{example}}} {{^example}}None{{/example}}  # {{{dataType}}} | {{{description}}}
        {{/allParams}}

        # Make request
        {{#returnType}}
        response = self.api.{{operationId}}(
            {{#allParams}}
            {{#required}}{{paramName}}={{paramName}},{{/required}}
            {{/allParams}}
        )
        {{/returnType}}
        {{^returnType}}
        self.api.{{operationId}}(
            {{#allParams}}
            {{#required}}{{paramName}}={{paramName}},{{/required}}
            {{/allParams}}
        )
        {{/returnType}}

        # Verify request was made
        assert self.mock_request.called
        args, kwargs = self.mock_request.call_args

        # Verify request method and URL
        assert kwargs["method"] == "{{httpMethod}}"
        assert "{{path}}" in kwargs["url"]

        {{#queryParams}}
        # Verify query parameters
        assert "{{baseName}}=" in kwargs["url"]
        {{/queryParams}}

        {{#headerParams}}
        # Verify headers
        assert kwargs["headers"]["{{baseName}}"] is not None
        {{/headerParams}}

        {{#bodyParam}}
        # Verify body
        assert kwargs["body"] is not None
        {{/bodyParam}}

        {{#returnType}}
        # Verify response
        assert isinstance(response, {{returnType}})
        {{/returnType}}

    def test_{{operationId}}_error(self):
        """Test error handling for {{operationId}}"""
        # Mock error response
        mock_response = mock.Mock()
        mock_response.status = 400
        mock_response.read.return_value = json.dumps({"message": "Error message"})
        self.mock_request.return_value = mock_response

        # Test parameters
        {{#allParams}}
        {{#required}}
        {{paramName}} = {{{example}}} {{^example}}None{{/example}}
        {{/required}}
        {{/allParams}}

        # Verify error handling
        with pytest.raises(ApiException) as exc_info:
            self.api.{{operationId}}(
                {{#allParams}}
                {{#required}}{{paramName}}={{paramName}},{{/required}}
                {{/allParams}}
            )
        assert exc_info.value.status == 400

{{/operation}}
{{/operations}}